<%- include('partials/header') %>
<%- include('partials/navbar') %>

<div class="container py-4">
    <!-- Header -->
    <div class="card mb-3">
        <div class="card-body d-flex justify-content-between align-items-center">
            <h4 class="mb-0"><i class="fas fa-edit me-2"></i>Edit Bill #<%= billing.billNumber %></h4>
            <div>
                <a href="/billing/receipt/<%= billing.id %>" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-eye me-1"></i> View Receipt
                </a>
                <a href="/reports/billing/due" class="btn btn-sm btn-outline-secondary ms-2">
                    <i class="fas fa-arrow-left me-1"></i> Back to Bills
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Left Column: Patient & Bill Details -->
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Bill Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Patient</label>
                        <select class="form-select" id="patient-select">
                            <option value="">Select Patient</option>
                            <% patients.forEach(patient => { %>
                                <option value="<%= patient.id %>" <%= billing.PatientId == patient.id ? 'selected' : '' %>>
                                    <%= patient.name %> (<%= patient.patientId %>)
                                </option>
                            <% }); %>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Bill Date</label>
                        <input type="text" class="form-control bg-light" value="<%= new Date(billing.billDate).toLocaleDateString() %>" readonly>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Bill Number</label>
                        <input type="text" class="form-control bg-light" value="<%= billing.billNumber %>" readonly>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Delivery Date</label>
                        <input type="date" class="form-control" id="bill-delivari-date" 
                            value="<%= billing.billdelivaridate ? new Date(billing.billdelivaridate).toISOString().split('T')[0] : '' %>">
                    </div>
                </div>
            </div>
            
            <!-- Unbilled Appointments Section -->
            <div class="card mb-3">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-calendar-check me-2"></i>Unbilled Appointments</h5>
                    <button type="button" class="btn btn-sm btn-outline-primary" id="refresh-appointments">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div class="card-body">
                    <div id="unbilled-appointments-container">
                        <p class="text-muted text-center" id="no-appointments-msg">No unbilled appointments found</p>
                        <div id="appointment-list" class="list-group"></div>
                    </div>
                </div>
            </div>
            
            <!-- Bill Summary -->
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="fas fa-calculator me-2"></i>Bill Summary</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span class="fw-bold">Subtotal:</span>
                        <span>Tk  <span id="subtotal"><%= parseFloat(billing.totalAmount || 0).toFixed(2) %></span></span>
                    </div>
                    
                    <div class="mb-2">
                        <label class="form-label fw-bold mb-1">Discount</label>
                        <div class="input-group input-group-sm">
                            <input type="number" class="form-control" id="discount-percent" min="0" max="100" step="0.1" 
                                value="<%= parseFloat(billing.discountPercentage || 0).toFixed(1) %>">
                            <span class="input-group-text">%</span>
                            <span class="input-group-text">Tk </span>
                            <input type="number" class="form-control" id="discount-amount" min="0" step="0.01" 
                                value="<%= parseFloat(billing.discountAmount || 0).toFixed(2) %>">
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span class="fw-bold">Net Payable:</span>
                        <span>Tk  <span id="net-payable"><%= parseFloat(billing.netPayable || 0).toFixed(2) %></span></span>
                    </div>
                    
                    <div class="mb-2">
                        <label class="form-label fw-bold mb-1">Payment</label>
                        <div class="input-group input-group-sm">
                            <span class="input-group-text">Tk </span>
                            <input type="number" class="form-control" id="paid-amount" min="0" step="0.01" 
                                value="<%= parseFloat(billing.paidAmount || 0).toFixed(2) %>">
                            <select class="form-select" id="payment-method">
                                <option value="Cash" <%= billing.paymentMethod === 'Cash' ? 'selected' : '' %>>Cash</option>
                                <option value="Card" <%= billing.paymentMethod === 'Card' ? 'selected' : '' %>>Card</option>
                                <option value="Mobile Banking" <%= billing.paymentMethod === 'Mobile Banking' ? 'selected' : '' %>>Mobile</option>
                                <option value="Check" <%= billing.paymentMethod === 'Check' ? 'selected' : '' %>>Check</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between mb-3">
                        <span class="fw-bold">Due Amount:</span>
                        <span class="text-danger fw-bold">Tk  <span id="due-amount"><%= parseFloat(billing.dueAmount || 0).toFixed(2) %></span></span>
                    </div>
                    
                    <button type="button" class="btn btn-primary w-100" id="update-bill-btn">
                        <i class="fas fa-save me-1"></i> Update Bill
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Right Column: Bill Items -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-list-ul me-2"></i>Bill Items</h5>
                    <button type="button" class="btn btn-sm btn-success" id="add-item-btn">
                        <i class="fas fa-plus me-1"></i> Add Item
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered" id="bill-items-table">
                            <thead class="table-light">
                                <tr>
                                    <th width="15%">Type</th>
                                    <th width="55%">Description</th>
                                    <th width="25%" class="text-end">Price</th>
                                    <th width="5%"></th>
                                </tr>
                            </thead>
                            <tbody id="bill-items-list">
                                <% if (billing.items && billing.items.length > 0) { %>
                                    <% billing.items.forEach((item, index) => { %>
                                        <tr class="item-row">
                                            <td>
                                                <%= item.type.charAt(0).toUpperCase() + item.type.slice(1) %>
                                                <input type="hidden" class="item-type" value="<%= item.type %>">
                                                <input type="hidden" class="item-id" value="<%= item.id %>">
                                                <input type="hidden" class="item-quantity" value="1">
                                            </td>
                                            <td><%= item.name %></td>
                                            <td class="text-end">
                                                <span class="item-price item-amount"><%= parseFloat(item.price).toFixed(2) %></span>
                                            </td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-sm btn-outline-danger remove-item">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr id="no-items-row">
                                        <td colspan="4" class="text-center text-muted py-3">
                                            <i class="fas fa-info-circle me-1"></i> No items added yet
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-plus-circle me-2"></i>Add Item to Bill</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="add-item-form">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Item Type</label>
                        <select class="form-select" id="item-type" required>
                            <option value="">-- Select Type --</option>
                            <option value="appointment">Doctor Fee</option>
                            <option value="test">Test</option>
                            <option value="cabin">Cabin</option>
                            <!-- <option value="medicine">Medicine</option>
                            <option value="other">Other</option> -->
                        </select>
                    </div>

                    <!-- Doctor Fee Section -->
                    <div id="doctor-section" class="item-section" style="display:none;">
                        <div class="card mb-3 border-primary">
                            <div class="card-header bg-primary bg-opacity-10">
                                <h6 class="mb-0"><i class="fas fa-user-md me-2"></i>Doctor Fee</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Select Doctor</label>
                                    <select class="form-select" id="doctor-select-modal" size="5">
                                        <option value="">Select Doctor</option>
                                        <% doctors.forEach(doctor => { %>
                                            <option value="<%= doctor.id %>" 
                                                data-name="Dr. <%= doctor.name %>"
                                                data-specialization="<%= doctor.specialization %>"
                                                data-fee="<%= doctor.consultationFee %>">
                                                Dr. <%= doctor.name %> (<%= doctor.specialization %>)
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                                <div class="mb-2 border-top pt-2">
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Doctor:</div>
                                        <div class="col-8 fw-bold" id="doctor-name-display">-</div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Specialization:</div>
                                        <div class="col-8" id="doctor-specialization-display">-</div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Consultation Fee:</div>
                                        <div class="col-8" id="doctor-fee-display">-</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Section -->
                    <div id="test-section" class="item-section" style="display:none;">
                        <div class="card mb-3 border-success">
                            <div class="card-header bg-success bg-opacity-10">
                                <h6 class="mb-0"><i class="fas fa-vial me-2"></i>Test</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Select Test</label>
                                    <input type="text" class="form-control mb-2" id="test-search" placeholder="Search tests...">
                                    <select class="form-select" id="test-select-modal" size="5">
                                        <option value="">Select Test</option>
                                        <% tests.forEach(test => { %>
                                            <option value="<%= test.id %>" 
                                                data-name="<%= test.name %>"
                                                data-price="<%= test.price %>">
                                                <%= test.name %> 
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                                <div class="mb-2 border-top pt-2">
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Test Name:</div>
                                        <div class="col-8 fw-bold" id="test-name-display">-</div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Price:</div>
                                        <div class="col-8" id="test-price-display">-</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Cabin Section -->
                    <div id="cabin-section" class="item-section" style="display:none;">
                        <div class="card mb-3 border-info">
                            <div class="card-header bg-info bg-opacity-10">
                                <h6 class="mb-0"><i class="fas fa-bed me-2"></i>Cabin</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Select Cabin</label>
                                    <select class="form-select" id="cabin-select-modal">
                                        <option value="">Select Cabin</option>
                                        <% cabins.forEach(cabin => { %>
                                            <option value="<%= cabin.id %>" 
                                                data-number="<%= cabin.cabinNumber %>"
                                                data-type="<%= cabin.cabinType %>"
                                                data-rate="<%= cabin.pricePerDay %>">
                                                Cabin #<%= cabin.cabinNumber %> (<%= cabin.cabinType %>)
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Stay Duration (Days)</label>
                                        <input type="number" class="form-control" id="cabin-days" min="1" value="1">
                                    </div>
                                </div>
                                <div class="mb-2 border-top pt-2">
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Cabin:</div>
                                        <div class="col-8 fw-bold" id="cabin-number-display">-</div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Type:</div>
                                        <div class="col-8" id="cabin-type-display">-</div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Daily Rate:</div>
                                        <div class="col-8" id="cabin-rate-display">-</div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-4 text-muted">Total Amount:</div>
                                        <div class="col-8 fw-bold" id="cabin-total-display">-</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Other Item Section -->
                    <div id="other-section" class="item-section" style="display:none;">
                        <div class="card mb-3 border-secondary">
                            <div class="card-header bg-secondary bg-opacity-10">
                                <h6 class="mb-0"><i class="fas fa-pills me-2"></i>Other Item</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Item Description</label>
                                    <input type="text" class="form-control" id="item-description">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Price (Tk )</label>
                                    <input type="number" class="form-control" id="item-price" min="0" step="0.01">
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="add-item-confirm">Add Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner Modal -->
<div class="modal fade" id="loadingModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center p-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mb-0">Processing your request...</p>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    // Initial setup of values from existing bill data
    let initialSubtotal = parseFloat($('#subtotal').text()) || 0;
    
    // Track if items have been modified
    let itemsModified = false;
    
    // Function to safely parse float values
    function safeParseFloat(value) {
        const parsed = parseFloat(value);
        return isNaN(parsed) ? 0 : parsed;
    }
    
    // Function to recalculate the totals based on items in the table
    function recalculateItemsTotal() {
        let itemsTotal = 0;
        $('.item-price').each(function() {
            itemsTotal += safeParseFloat($(this).text());
        });
        return itemsTotal;
    }
    
    // Initialize totals from the bill data or recalculate from items
    function initializeOrUpdateTotals() {
        // If items have been modified, calculate from current items
        if (itemsModified) {
            const itemsTotal = recalculateItemsTotal();
            $('#subtotal').text(itemsTotal.toFixed(2));
        } else {
            // Otherwise use the original bill amount
            $('#subtotal').text(initialSubtotal.toFixed(2));
        }
        updateNetAndDue();
    }
    
    // Call this once at the beginning to ensure values are displayed correctly
    initializeOrUpdateTotals();
    
    // Load unbilled appointments for the selected patient
    function loadUnbilledAppointments() {
        const patientId = $('#patient-select').val();
        if (!patientId) {
            $('#appointment-list').empty();
            $('#no-appointments-msg').show();
            return;
        }
        
        $('#appointment-list').empty();
        $('#no-appointments-msg').text('Loading appointments...');
        
        $.ajax({
            url: `/billing/patient/${patientId}/unbilled-appointments`,
            type: 'GET',
            success: function(appointments) {
                $('#appointment-list').empty();
                
                if (appointments && appointments.length > 0) {
                    $('#no-appointments-msg').hide();
                    
                    appointments.forEach(appointment => {
                        const appointmentDate = new Date(appointment.appointmentDate);
                        const formattedDate = appointmentDate.toLocaleDateString();
                        
                        const appointmentItem = `
                            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                <div>
                                    <div><strong>Dr. ${appointment.Doctor.name}</strong></div>
                                    <div class="small text-muted">${formattedDate} at ${appointment.appointmentTime}</div>
                                </div>
                                <button class="btn btn-sm btn-outline-success add-appointment-btn" 
                                    data-id="${appointment.id}"
                                    data-doctor-id="${appointment.DoctorId}"
                                    data-doctor-name="Dr. ${appointment.Doctor.name}"
                                    data-doctor-fee="${appointment.Doctor.consultationFee || 0}"
                                    data-specialization="${appointment.Doctor.specialization || ''}">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </div>
                        `;
                        
                        $('#appointment-list').append(appointmentItem);
                    });
                    
                    // Add event handlers for the add buttons
                    $('.add-appointment-btn').click(function() {
                        const appointmentId = $(this).data('id');
                        const doctorId = $(this).data('doctor-id');
                        const doctorName = $(this).data('doctor-name');
                        const doctorFee = parseFloat($(this).data('doctor-fee')) || 0;
                        const specialization = $(this).data('specialization') || '';
                        
                        // Add this appointment as an item to the bill
                        addDoctorAppointmentToBill(appointmentId, doctorId, doctorName, doctorFee, specialization);
                        
                        // Remove this appointment from the list
                        $(this).closest('.list-group-item').fadeOut(300, function() { 
                            $(this).remove();
                            if ($('#appointment-list').children().length === 0) {
                                $('#no-appointments-msg').text('No unbilled appointments found').show();
                            }
                        });
                    });
                    
                } else {
                    $('#no-appointments-msg').text('No unbilled appointments found').show();
                }
            },
            error: function(xhr) {
                console.error('Error loading appointments:', xhr);
                $('#no-appointments-msg').text('Failed to load appointments').show();
            }
        });
    }
    
    // Function to add a doctor appointment to the bill
    function addDoctorAppointmentToBill(appointmentId, doctorId, doctorName, doctorFee, specialization) {
        // Check if this appointment is already added
        let isAlreadyAdded = false;
        $('.item-row').each(function() {
            const type = $(this).find('.item-type').val();
            const id = $(this).find('.item-id').val();
            if (type === 'appointment' && id === doctorId.toString()) {
                isAlreadyAdded = true;
                return false; // Break the loop
            }
        });
        
        if (isAlreadyAdded) {
            if (!confirm('This doctor is already added to the bill. Do you want to add again?')) {
                return;
            }
        }
        
        // Remove "no items" row if it exists
        if ($('#no-items-row').length) {
            $('#no-items-row').remove();
        }
        
        const newRow = `
            <tr class="item-row">
                <td>
                    Appointment
                    <input type="hidden" class="item-type" value="appointment">
                    <input type="hidden" class="item-id" value="${doctorId}">
                    <input type="hidden" class="item-appointment-id" value="${appointmentId}">
                    <input type="hidden" class="item-quantity" value="1">
                </td>
                <td>${doctorName} (${specialization})</td>
                <td class="text-end">
                    <span class="item-price">${doctorFee.toFixed(2)}</span>
                </td>
                <td class="text-center">
                    <button type="button" class="btn btn-sm btn-outline-danger remove-item">
                        <i class="fas fa-times"></i>
                    </button>
                </td>
            </tr>
        `;
        
        $('#bill-items-list').append(newRow);
        
        // Mark that items have been modified
        itemsModified = true;
        
        // Recalculate totals
        initializeOrUpdateTotals();
        
        // Alert success
        alert(`Added ${doctorName}'s appointment to the bill`);
    }
    
    // Load unbilled appointments when patient is selected
    $('#patient-select').change(function() {
        loadUnbilledAppointments();
    });
    
    // Refresh appointments button
    $('#refresh-appointments').click(function() {
        loadUnbilledAppointments();
    });
    
    // Initial load of appointments if a patient is already selected
    if ($('#patient-select').val()) {
        loadUnbilledAppointments();
    }
    
    // Show/hide appropriate section based on item type
    $('#item-type').change(function() {
        const itemType = $(this).val();
        $('.item-section').hide();
        
        if (itemType === 'appointment') {
            $('#doctor-section').show();
        } else if (itemType === 'test') {
            $('#test-section').show();
        } else if (itemType === 'cabin') {
            $('#cabin-section').show();
        } else if (itemType === 'medicine' || itemType === 'other') {
            $('#other-section').show();
        }
    });
    
    // Doctor search functionality
    $('#doctor-search').on('input', function() {
        const searchTerm = $(this).val().toLowerCase().trim();
        
        $('#doctor-select-modal option').each(function() {
            const optionText = $(this).text().toLowerCase();
            if (searchTerm === '' || optionText.indexOf(searchTerm) > -1) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    });
    
    // Test search functionality
    $('#test-search').on('input', function() {
        const searchTerm = $(this).val().toLowerCase().trim();
        
        $('#test-select-modal option').each(function() {
            const optionText = $(this).text().toLowerCase();
            if (searchTerm === '' || optionText.indexOf(searchTerm) > -1) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    });
    
    // Doctor selection
    $('#doctor-select-modal').change(function() {
        const selected = $(this).find('option:selected');
        
        if (selected.val()) {
            const name = selected.attr('data-name');
            const specialization = selected.attr('data-specialization');
            const fee = safeParseFloat(selected.attr('data-fee'));
            
            $('#doctor-name-display').text(name);
            $('#doctor-specialization-display').text(specialization);
            $('#doctor-fee-display').text('Tk  ' + fee.toFixed(2));
        } else {
            $('#doctor-name-display').text('-');
            $('#doctor-specialization-display').text('-');
            $('#doctor-fee-display').text('-');
        }
    });
    
    // Test selection
    $('#test-select-modal').change(function() {
        const selected = $(this).find('option:selected');
        
        if (selected.val()) {
            const name = selected.attr('data-name');
            const price = safeParseFloat(selected.attr('data-price'));
            
            $('#test-name-display').text(name);
            $('#test-price-display').text('Tk  ' + price.toFixed(2));
        } else {
            $('#test-name-display').text('-');
            $('#test-price-display').text('-');
        }
    });
    
    // Cabin selection and duration
    $('#cabin-select-modal, #cabin-days').on('change input', function() {
        const selected = $('#cabin-select-modal').find('option:selected');
        
        if (selected.val()) {
            const number = selected.attr('data-number');
            const type = selected.attr('data-type');
            const rate = safeParseFloat(selected.attr('data-rate'));
            const days = parseInt($('#cabin-days').val()) || 1;
            const total = rate * days;
            
            $('#cabin-number-display').text('Cabin #' + number);
            $('#cabin-type-display').text(type);
            $('#cabin-rate-display').text('Tk  ' + rate.toFixed(2) + ' per day');
            $('#cabin-total-display').text('Tk  ' + total.toFixed(2) + ' (' + days + ' days)');
        } else {
            $('#cabin-number-display').text('-');
            $('#cabin-type-display').text('-');
            $('#cabin-rate-display').text('-');
            $('#cabin-total-display').text('-');
        }
    });

    // Ensure cabin days is a positive number
    $('#cabin-days').on('change', function() {
        const value = parseInt($(this).val()) || 1;
        if (value < 1) {
            $(this).val(1);
            // Trigger change event to update displays
            $(this).trigger('change');
        }
    });

    // Show add item modal
    $('#add-item-btn').click(function() {
        $('#add-item-form')[0].reset();
        $('.item-section').hide();
        $('#addItemModal').modal('show');
    });

    // Add item to bill
    $('#add-item-confirm').click(function() {
        // Get common values
        const itemType = $('#item-type').val();
        if (!itemType) {
            alert('Please select an item type');
            return;
        }
        
        let itemId, itemName, itemPrice;
        
        try {
            // Process based on item type
            if (itemType === 'appointment') {
                const selected = $('#doctor-select-modal').find('option:selected');
                if (!selected.val()) {
                    alert('Please select a doctor');
                    return;
                }
                
                itemId = selected.val();
                itemName = selected.attr('data-name');
                itemPrice = safeParseFloat(selected.attr('data-fee'));
                
                // Check if doctor is already added
                const existingDoctorItems = [];
                $('.item-row').each(function() {
                    const type = $(this).find('.item-type').val();
                    const id = $(this).find('.item-id').val();
                    if (type === 'appointment' && id === itemId) {
                        existingDoctorItems.push($(this));
                    }
                });
                
                if (existingDoctorItems.length > 0) {
                    if (!confirm('This doctor is already added to the bill. Do you want to add again?')) {
                        return;
                    }
                }
                
            } else if (itemType === 'test') {
                const selected = $('#test-select-modal').find('option:selected');
                if (!selected.val()) {
                    alert('Please select a test');
                    return;
                }
                
                itemId = selected.val();
                itemName = selected.attr('data-name');
                itemPrice = safeParseFloat(selected.attr('data-price'));
                
                // Check if test is already added
                const existingTestItems = [];
                $('.item-row').each(function() {
                    const type = $(this).find('.item-type').val();
                    const id = $(this).find('.item-id').val();
                    if (type === 'test' && id === itemId) {
                        existingTestItems.push($(this));
                    }
                });
                
                if (existingTestItems.length > 0) {
                    if (!confirm('This test is already added to the bill. Do you want to add again?')) {
                        return;
                    }
                }
                
            } else if (itemType === 'cabin') {
                const selected = $('#cabin-select-modal').find('option:selected');
                if (!selected.val()) {
                    alert('Please select a cabin');
                    return;
                }
                
                itemId = selected.val();
                const cabinNumber = selected.attr('data-number');
                const cabinType = selected.attr('data-type');
                const days = parseInt($('#cabin-days').val()) || 1;
                const rate = safeParseFloat(selected.attr('data-rate'));
                
                if (days < 1) {
                    alert('Stay duration must be at least 1 day');
                    return;
                }
                
                itemName = `Cabin #${cabinNumber} (${cabinType}) - ${days} day${days > 1 ? 's' : ''}`;
                itemPrice = rate * days;
                
                // Check if cabin is already added
                const existingCabinItems = [];
                $('.item-row').each(function() {
                    const type = $(this).find('.item-type').val();
                    const id = $(this).find('.item-id').val();
                    if (type === 'cabin' && id === itemId) {
                        existingCabinItems.push($(this));
                    }
                });
                
                if (existingCabinItems.length > 0) {
                    if (!confirm('This cabin is already added to the bill. Do you want to add again?')) {
                        return;
                    }
                }
                
            } else if (itemType === 'medicine' || itemType === 'other') {
                itemId = 'custom-' + Date.now();
                itemName = $('#item-description').val();
                if (!itemName) {
                    alert('Please enter item description');
                    return;
                }
                
                itemPrice = safeParseFloat($('#item-price').val());
                if (isNaN(itemPrice) || itemPrice <= 0) {
                    alert('Please enter a valid price');
                    return;
                }
            }
            
            // Add item to table
            if ($('#no-items-row').length) {
                $('#no-items-row').remove();
            }
            
            const newRow = `
                <tr class="item-row">
                    <td>
                        ${itemType.charAt(0).toUpperCase() + itemType.slice(1)}
                        <input type="hidden" class="item-type" value="${itemType}">
                        <input type="hidden" class="item-id" value="${itemId}">
                        <input type="hidden" class="item-quantity" value="1">
                    </td>
                    <td>${itemName}</td>
                    <td class="text-end">
                        <span class="item-price">${itemPrice.toFixed(2)}</span>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-sm btn-outline-danger remove-item">
                            <i class="fas fa-times"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            $('#bill-items-list').append(newRow);
            
            // Mark that items have been modified
            itemsModified = true;
            
            // Recalculate totals
            initializeOrUpdateTotals();
            
            // Close modal
            $('#addItemModal').modal('hide');
        } catch (error) {
            console.error('Error adding item:', error);
            alert('An error occurred while adding the item. Please try again.');
        }
    });

    // Remove item
    $(document).on('click', '.remove-item', function() {
        try {
            // Mark items as modified
            itemsModified = true;
            
            $(this).closest('tr').remove();
            
            if ($('#bill-items-list tr').length === 0) {
                $('#bill-items-list').append(`
                    <tr id="no-items-row">
                        <td colspan="4" class="text-center text-muted py-3">
                            <i class="fas fa-info-circle me-1"></i> No items added yet
                        </td>
                    </tr>
                `);
            }
            
            // Recalculate totals
            initializeOrUpdateTotals();
        } catch (error) {
            console.error('Error removing item:', error);
            alert('An error occurred while removing the item. Please try again.');
        }
    });

    // Update discount percentage
    $('#discount-percent').on('input', function() {
        try {
            const percent = safeParseFloat($(this).val());
            const subtotal = safeParseFloat($('#subtotal').text());
            const amount = (subtotal * percent / 100).toFixed(2);
            
            $('#discount-amount').val(amount);
            updateNetAndDue();
        } catch (error) {
            console.error('Error updating discount percent:', error);
        }
    });

    // Update discount amount
    $('#discount-amount').on('input', function() {
        try {
            const amount = safeParseFloat($(this).val());
            const subtotal = safeParseFloat($('#subtotal').text());
            
            if (subtotal > 0) {
                const percent = ((amount / subtotal) * 100).toFixed(1);
                $('#discount-percent').val(percent);
            } else {
                $('#discount-percent').val(0);
            }
            
            updateNetAndDue();
        } catch (error) {
            console.error('Error updating discount amount:', error);
        }
    });

    // Update due amount when paid amount changes
    $('#paid-amount').on('input', function() {
        try {
            updateDueAmount();
        } catch (error) {
            console.error('Error updating paid amount:', error);
        }
    });

    // Update net payable and due amount
    function updateNetAndDue() {
        try {
            const subtotal = safeParseFloat($('#subtotal').text());
            const discount = safeParseFloat($('#discount-amount').val());
            const netPayable = Math.max(0, subtotal - discount);
            
            $('#net-payable').text(netPayable.toFixed(2));
            updateDueAmount();
        } catch (error) {
            console.error('Error in updateNetAndDue:', error);
        }
    }

    // Update due amount
    function updateDueAmount() {
        try {
            const netPayable = safeParseFloat($('#net-payable').text());
            const paidAmount = safeParseFloat($('#paid-amount').val());
            const dueAmount = Math.max(0, netPayable - paidAmount);
            
            $('#due-amount').text(dueAmount.toFixed(2));
        } catch (error) {
            console.error('Error in updateDueAmount:', error);
        }
    }

    // Handle update bill button
    $('#update-bill-btn').click(function() {
        try {
            // Validate items
            if ($('#bill-items-list .item-row').length === 0) {
                alert('Please add at least one item to the bill');
                return;
            }
            
            // Validate patient
            const patientId = $('#patient-select').val();
            if (!patientId) {
                alert('Please select a patient');
                $('#patient-select').focus();
                return;
            }
            
            // Collect all items
            const items = [];
            const appointmentIds = [];
            
            $('#bill-items-list .item-row').each(function() {
                const row = $(this);
                const itemType = row.find('.item-type').val();
                
                const item = {
                    type: itemType,
                    id: row.find('.item-id').val(),
                    name: row.find('td:nth-child(2)').text().trim(),
                    price: safeParseFloat(row.find('.item-price').text()),
                    quantity: 1,
                    amount: safeParseFloat(row.find('.item-price').text())
                };
                
                // If it's a doctor appointment, collect the appointment ID
                if (itemType === 'appointment') {
                    const appointmentId = row.find('.item-appointment-id').val();
                    if (appointmentId) {
                        appointmentIds.push(appointmentId);
                    }
                }
                
                items.push(item);
            });
            
            // Collect billing details
            const totalAmount = safeParseFloat($('#subtotal').text());
            const discountPercentage = safeParseFloat($('#discount-percent').val());
            const discountAmount = safeParseFloat($('#discount-amount').val());
            const netPayable = safeParseFloat($('#net-payable').text());
            const paidAmount = safeParseFloat($('#paid-amount').val());
            const dueAmount = safeParseFloat($('#due-amount').text());
            const paymentMethod = $('#payment-method').val();
            const billdelivaridate = $('#bill-delivari-date').val();
            
            // Show loading spinner
            $('#loadingModal').modal('show');
            
            // Submit update request
            $.ajax({
                url: `/billing/<%= billing.id %>`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify({
                    patientId,
                    totalAmount,
                    discountPercentage,
                    discountAmount,
                    netPayable,
                    paymentMethod,
                    paidAmount,
                    dueAmount,
                    items: JSON.stringify(items),
                    appointmentIds: JSON.stringify(appointmentIds),
                    billdelivaridate
                }),
                success: function(response) {
                    $('#loadingModal').modal('hide');
                    alert('Bill updated successfully!');
                    window.location.href = `/billing/receipt/${response.billing.id}`;
                },
                error: function(xhr) {
                    $('#loadingModal').modal('hide');
                    alert('Error updating bill: ' + (xhr.responseJSON?.message || 'Unknown error'));
                    console.error('Error updating bill:', xhr);
                }
            });
        } catch (error) {
            $('#loadingModal').modal('hide');
            console.error('Error in update bill process:', error);
            alert('An error occurred while updating the bill. Please check the console for details.');
        }
    });
});
</script>

<%- include('partials/footer') %> 