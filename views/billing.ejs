<%- include('partials/header') %>
<%- include('partials/navbar') %>

<div class="container-fluid py-4">
    <!-- Patient Appointment -->
    <% if (visibleFeatures && visibleFeatures.scheduleAppointment) { %>
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-calendar-check me-2"></i>Schedule Appointment</h5>
        </div>
        <div class="card-body">
            <form id="appointment-form">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label required-label">Patient</label>
                        <div class="input-group">
                            <select class="form-select" id="patient-select" name="patientId" required>
                                <option value="">Select a patient</option>
                                <% patients.forEach(patient => { %>
                                    <option value="<%= patient.id %>"><%= patient.name %> (<%= patient.patientId %>)</option>
                                <% }); %>
                            </select>
                            <button class="btn btn-outline-success" type="button" data-bs-toggle="modal" data-bs-target="#addPatientModal" title="Add New Patient">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label required-label">Doctor</label>
                        <div class="input-group">
                            <select class="form-select" id="doctor-select" name="doctorId" required>
                                <option value="">Select a Doctor</option>
                                <% doctors.forEach(doctor => { %>
                                    <option value="<%= doctor.id %>">Dr. <%= doctor.name %> (<%= doctor.specialization %>)</option>
                                <% }); %>
                            </select>
                            <button class="btn btn-outline-success" type="button" data-bs-toggle="modal" data-bs-target="#addDoctorModal" title="Add New Doctor">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label required-label">Date</label>
                        <input type="date" class="form-control" id="appointment-date" name="appointmentDate" required>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label required-label">Time</label>
                        <input type="time" class="form-control" id="appointment-time" name="appointmentTime" required>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary btn-save w-100">
                            <i class="fas fa-calendar-plus me-1"></i> Schedule
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <% } %>

    <!-- Cabin Selection -->
    <% if (visibleFeatures && visibleFeatures.cabinAllocation) { %>
    <div class="card mt-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-bed me-2"></i>Cabin Allocation</h5>
        </div>
        <div class="card-body">
            <form id="cabin-form">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label required-label">Select Cabin</label>
                        <div class="input-group">
                            <select class="form-select" id="cabin-select" name="cabinId" required>
                                <option value="">Select a Cabin</option>
                                <% cabins.forEach(cabin => { %>
                                    <option value="<%= cabin.id %>">Cabin <%= cabin.cabinNumber %> - <%= cabin.cabinType %> (<%= cabin.status %>)</option>
                                <% }); %>
                            </select>
                            <button class="btn btn-outline-success" type="button" data-bs-toggle="modal" data-bs-target="#addCabinModal" title="Add New Cabin">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label required-label">Admission Date</label>
                        <input type="date" class="form-control" id="admission-date" name="admissionDate" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Expected Stay (Days)</label>
                        <input type="number" class="form-control" id="expected-stay" name="expectedStay" min="1" value="1">
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary btn-save w-100">
                            <i class="fas fa-check-circle me-1"></i> Allocate
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <% } %>

    <div class="row mt-4">
        <!-- Test Information -->
        <div class="col-md-8">
            <!-- Unbilled Appointments Section -->
            <% if (visibleFeatures && visibleFeatures.scheduleAppointment) { %>
            <div class="card mb-4" id="unbilled-appointments-card" style="display: none;">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-calendar-check me-2"></i>Unbilled Appointments</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="select-all-appointments">
                                            <label class="form-check-label" for="select-all-appointments"></label>
                                        </div>
                                    </th>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Doctor</th>
                                    <th>Fee</th>
                                </tr>
                            </thead>
                            <tbody id="unbilled-appointments-list">
                                <!-- Appointments will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } %>

            <!-- Unbilled Cabin Bookings Section -->
            <% if (visibleFeatures && visibleFeatures.cabinAllocation) { %>
            <div class="card mb-4" id="unbilled-cabins-card" style="display: none;">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-bed me-2"></i>Unbilled Cabin Bookings</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="select-all-cabins">
                                            <label class="form-check-label" for="select-all-cabins"></label>
                                        </div>
                                    </th>
                                    <th>Cabin</th>
                                    <th>Type</th>
                                    <th>Admission Date</th>
                                    <th>Days</th>
                                    <th>Daily Rate</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody id="unbilled-cabins-list">
                                <!-- Cabin bookings will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } %>

            <!-- Test Requisition -->
            <% if (visibleFeatures && visibleFeatures.testRequisition) { %>
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-vial me-2"></i>Test Requisition</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-3">
                        <div class="col-md-2">
                            <label class="form-label">Priority</label>
                            <select class="form-select" id="test-priority">
                                <option value="Normal">Normal</option>
                                <option value="Urgent">Urgent</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Extra Charge</label>
                            <div class="input-group">
                                <span class="input-group-text">Tk</span>
                                <input type="number" class="form-control" id="test-extra-charge" min="0" step="0.01" value="0">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label required-label">Test</label>
                            <div class="input-group">
                                <select class="form-select" id="test-select" name="testId">
                                    <option value="">Select a Test</option>
                                    <% tests.forEach(test => { %>
                                        <option value="<%= test.id %>" data-price="<%= test.price %>"><%= test.name %></option>
                                    <% }); %>
                                </select>
                                <button class="btn btn-outline-success" type="button" data-bs-toggle="modal" data-bs-target="#addTestModal" title="Add New Test">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Delivery Date (if applicable)</label>
                            <input type="date" class="form-control" id="test-delivery-date">
                        </div>
                    </div>
                    
                    
                    
                    
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Test Name</th>
                                    <th>Price (Tk)</th>
                                    <th>Priority</th>
                                    <th>Delivery Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="test-list">
                                <!-- Test items will be added here dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } %>
        </div>
        
        <!-- Billing Summary -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-file-invoice-dollar me-2"></i>Billing Summary</h5>
                </div>
                <div class="card-body">
                    <form id="billing-form">
                        <input type="hidden" id="billing-patient-id" name="patientId">
                        <input type="hidden" id="billing-items" name="items" value="[]">
                        <input type="hidden" id="billing-appointment-ids" name="appointmentIds" value="[]">
                        <input type="hidden" id="billing-cabin-booking-ids" name="cabinBookingIds" value="[]">
                        <div class="mb-3">
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Total Amount:</div>
                                <div class="col-5">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Tk</span>
                                        <!-- <div class="col-5 text-end" id="total-amount">Tk 0.00</div> -->
                                        <input type="number" class="form-control" id="total-amount-input" name="totalAmount" value="0">
                                        <button class="btn btn-sm btn-outline-secondary" type="button" id="reset-total-btn" title="Reset to calculated total">
                                            <i class="fas fa-sync-alt"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-7 fw-bold">Discount (%):</div>
                                <div class="col-5">
                                    <div class="input-group input-group-sm">
                                        <input type="number" class="form-control" id="discount-percentage" name="discountPercentage" min="0" max="100" value="0">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Discount Amount:</div>
                                <div class="col-5 text-end" id="discount-amount">Tk 0.00</div>
                                <input type="hidden" id="discount-amount-input" name="discountAmount" value="0">
                            </div>
                            <hr>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold fs-5">Net Payable:</div>
                                <div class="col-5 text-end fw-bold fs-5 text-primary" id="net-payable">Tk 0.00</div>
                                <input type="hidden" id="net-payable-input" name="netPayable" value="0">
                            </div>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Delivery Date:</div>
                                <div class="col-5">
                                    <input type="date" class="form-control form-control-sm" id="bill-delivaridate" name="billdelivaridate">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Payment Method:</div>
                                <div class="col-5">
                                    <select class="form-select" id="payment-method" name="paymentMethod">
                                        <option value="cash">Cash</option>
                                        <option value="card">Credit Card</option>
                                        <option value="insurance">Insurance</option>
                                    </select>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Paid Amount:</div>
                                <div class="col-5">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Tk</span>
                                        <input type="number" class="form-control" id="paid-amount" name="paidAmount" min="0" value="0" step="0.01">
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Due Amount:</div>
                                <div class="col-5 text-end fw-bold text-danger" id="due-amount">Tk0.00</div>
                                <input type="hidden" id="due-amount-input" name="dueAmount" value="0">
                            </div>
                            <div class="row mb-3">
                                <div class="col-7 fw-bold">Status:</div>
                                <div class="col-5 text-end" id="payment-status">
                                    <span class="badge bg-danger">Due</span>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary w-100 btn-save">
                            <i class="fas fa-save me-1"></i> Complete Billing
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Patient Modal -->
<div class="modal fade" id="addPatientModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-user-plus me-2"></i>Add New Patient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="patient-form">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label required-label">Full Name</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label required-label">Gender</label>
                            <select class="form-select" name="gender" required>
                                <option value="">Select Gender</option>
                                <option value="male">Male</option>
                                <option value="female">Female</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label required-label">Date of Birth</label>
                            <input type="date" class="form-control" name="dateOfBirth" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label required-label">Phone</label>
                            <input type="tel" class="form-control" name="phone" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" name="email">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Blood Group</label>
                            <select class="form-select" name="bloodGroup">
                                <option value="">Select Blood Group</option>
                                <option value="A+">A+</option>
                                <option value="A-">A-</option>
                                <option value="B+">B+</option>
                                <option value="B-">B-</option>
                                <option value="AB+">AB+</option>
                                <option value="AB-">AB-</option>
                                <option value="O+">O+</option>
                                <option value="O-">O-</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <textarea class="form-control" name="address" rows="2"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save me-1"></i> Save Patient</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Doctor Modal -->
<div class="modal fade" id="addDoctorModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-user-md me-2"></i>Add New Doctor</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="doctor-form">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label required-label">Full Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label required-label">Specialization</label>
                        <input type="text" class="form-control" name="specialization" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label required-label">Qualification</label>
                        <input type="text" class="form-control" name="qualification" required>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label required-label">Phone</label>
                            <input type="tel" class="form-control" name="phone" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label required-label">Email</label>
                            <input type="email" class="form-control" name="email" >
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label required-label">Consultation Fee</label>
                        <div class="input-group">
                            <span class="input-group-text">Tk</span>
                            <input type="number" class="form-control" name="consultationFee" min="0" step="0.01" required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save me-1"></i> Save Doctor</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Cabin Modal -->
<div class="modal fade" id="addCabinModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-bed me-2"></i>Add New Cabin</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="cabin-form-modal">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label required-label">Cabin Number</label>
                        <input type="text" class="form-control" name="cabinNumber" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label required-label">Cabin Type</label>
                        <select class="form-select" name="cabinType" required>
                            <option value="">Select Type</option>
                            <option value="VIP">VIP</option>
                            <option value="Deluxe">Deluxe</option>
                            <option value="Regular">Regular</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label required-label">Price Per Day</label>
                        <div class="input-group">
                            <span class="input-group-text">Tk</span>
                            <input type="number" class="form-control" name="pricePerDay" min="0" step="0.01" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="2"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save me-1"></i> Save Cabin</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Test Modal -->
<div class="modal fade" id="addTestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-vial me-2"></i>Add New Test</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="test-form-modal">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label required-label">Test Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label required-label">Price</label>
                        <div class="input-group">
                            <span class="input-group-text">Tk</span>
                            <input type="number" class="form-control" name="price" min="0" step="0.01" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save me-1"></i> Save Test</button>
                </div>
            </form>
        </div>
    </div>
</div>

<%- include('partials/footer') %>

<style>
    /* Priority and Payment Method Dropdown Styles */
    .priority-dropdown .select2-results__option,
    .payment-dropdown .select2-results__option {
        padding: 8px 12px;
        font-size: 14px;
    }

    .priority-dropdown .select2-results__option--highlighted,
    .payment-dropdown .select2-results__option--highlighted {
        background-color: #e9ecef;
        color: #212529;
    }

    .priority-dropdown .select2-results__option--selected,
    .payment-dropdown .select2-results__option--selected {
        background-color: #0d6efd;
        color: white;
    }

    .select2-container--bootstrap-5 .select2-selection {
        min-height: 38px;
        padding: 4px 8px;
    }

    .select2-container--bootstrap-5 .select2-selection--single {
        display: flex;
        align-items: center;
    }
    
    /* Manual input indicator */
    .manual-input {
        background-color: #fffde7 !important;
        font-weight: bold;
        color: #ff6f00;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .select2-container--bootstrap-5 {
            width: 100% !important;
        }
        
        .select2-container--bootstrap-5 .select2-selection {
            min-height: 42px;
        }
    }
</style>

<script>
    $(document).ready(function() {
        // Initialize Select2 for all dropdowns
        $('#patient-select').select2({
            theme: 'bootstrap-5',
            placeholder: 'Search patient...',
            allowClear: true
        });
        
        $('#doctor-select').select2({
            theme: 'bootstrap-5',
            placeholder: 'Search doctor...',
            allowClear: true
        });
        
        $('#cabin-select').select2({
            theme: 'bootstrap-5',
            placeholder: 'Search cabin...',
            allowClear: true
        });
        
        $('#test-select').select2({
            theme: 'bootstrap-5',
            placeholder: 'Search test...',
            allowClear: true
        });
        
        $('#test-priority').select2({
            theme: 'bootstrap-5',
            minimumResultsForSearch: Infinity,
            width: '100%',
            dropdownCssClass: 'priority-dropdown'
        });
        
        $('#payment-method').select2({
            theme: 'bootstrap-5',
            minimumResultsForSearch: Infinity,
            width: '100%',
            dropdownCssClass: 'payment-dropdown'
        });
        
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });
        
        // Add test automatically when selected from dropdown
        $('#test-select').on('change', function() {
            const testId = $(this).val();
            
            if (!testId) return;
            
            const testSelect = $(this);
            const testPriority = $('#test-priority').val();
            const extraCharge = parseFloat($('#test-extra-charge').val()) || 0;
            const deliveryDate = $('#test-delivery-date').val();
            
            const testName = testSelect.find('option:selected').text();
            let testPrice = parseFloat(testSelect.find('option:selected').data('price'));
            
            // Add extra charge if entered
            const totalPrice = testPrice + extraCharge;
            
            // Check if test already added
            if ($(`#test-row-${testId}`).length > 0) {
                alert('This test is already added');
                testSelect.val(null).trigger('change');
                return;
            }
            
            const priorityLabel = testPriority === 'Urgent' ? 
                '<span class="badge bg-warning">Urgent</span>' : 
                '<span class="badge bg-info">Normal</span>';
            
            const extraChargeDisplay = extraCharge > 0 ? 
                ` <small class="text-muted">(+$${extraCharge.toFixed(2)} extra)</small>` : '';
            
            // Format delivery date for display and storage
            const displayDeliveryDate = deliveryDate ? new Date(deliveryDate).toLocaleDateString() : 'N/A';
            
            const newRow = `
                <tr id="test-row-${testId}" data-id="${testId}" data-name="${testName}"  
                    data-price="${totalPrice}" data-priority="${testPriority}" 
                    data-delivery-date="${deliveryDate || ''}">
                    <td>${testName}</td>
                    <td>$${totalPrice.toFixed(2)}${extraChargeDisplay}</td>
                    <td>${priorityLabel}</td>
                    <td>${displayDeliveryDate}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-danger delete-test">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            $('#test-list').append(newRow);
            
            // Reset selection and extra charge
            testSelect.val(null).trigger('change');
            $('#test-extra-charge').val(0);
            // Don't reset delivery options to allow for faster consecutive entries
            
            // Update all billing items
            updateAllBillingItems();
        });
        
        // Initialize patient selector
        $('#patient-select').on('change', function() {
            const patientId = $(this).val();
            
            // Clear test list
            $('#test-list').empty();
            
            if (patientId) {
                $('#billing-patient-id').val(patientId);
                
                // Load unbilled appointments
                loadUnbilledAppointments(patientId);
                
                // Load unbilled cabin bookings
                loadUnbilledCabinBookings(patientId);
            } else {
                $('#billing-patient-id').val('');
                $('#unbilled-appointments-card').hide();
                $('#unbilled-cabins-card').hide();
            }
            
            // Update billing summary
            updateBillingSummary();
        });
        
        // Set today's date as default for appointment date
        const today = new Date();
        $('#appointment-date').val(today.toISOString().split('T')[0]);
        $('#admission-date').val(today.toISOString().split('T')[0]);
        
        
        // Load unbilled appointments for patient
        function loadUnbilledAppointments(patientId) {
            $.ajax({
                url: `/billing/patient/${patientId}/unbilled-appointments`,
                type: 'GET',
                success: function(appointments) {
                    $('#unbilled-appointments-list').empty();
                    
                    if (appointments.length > 0) {
                        appointments.forEach(appointment => {
                            const appointmentDate = new Date(appointment.appointmentDate);
                            const formattedDate = appointmentDate.toLocaleDateString();
                            
                            const fee = appointment.Doctor.consultationFee || 0;
                            
                            const row = `
                                <tr data-id="${appointment.id}" data-fee="${fee}" data-name="Consultation with Dr. ${appointment.Doctor.name}">
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input appointment-checkbox" type="checkbox" value="${appointment.id}" id="appointment-${appointment.id}">
                                            <label class="form-check-label" for="appointment-${appointment.id}"></label>
                                        </div>
                                    </td>
                                    <td>${formattedDate}</td>
                                    <td>${appointment.appointmentTime}</td>
                                    <td>Dr. ${appointment.Doctor.name}</td>
                                    <td>$${parseFloat(fee).toFixed(2)}</td>
                                </tr>
                            `;
                            
                            $('#unbilled-appointments-list').append(row);
                        });
                        
                        $('#unbilled-appointments-card').show();
                    } else {
                        $('#unbilled-appointments-card').hide();
                    }
                },
                error: function(error) {
                    console.error('Error loading appointments:', error);
                    $('#unbilled-appointments-card').hide();
                }
            });
        }
        
        // Load unbilled cabin bookings for patient
        function loadUnbilledCabinBookings(patientId) {
            $.ajax({
                url: `/cabins/booking/patient/${patientId}/unbilled`,
                type: 'GET',
                success: function(bookings) {
                    $('#unbilled-cabins-list').empty();
                    
                    if (bookings.length > 0) {
                        bookings.forEach(booking => {
                            const admissionDate = new Date(booking.admissionDate);
                            const formattedDate = admissionDate.toLocaleDateString();
                            
                            const dailyRate = parseFloat(booking.dailyRate);
                            const days = booking.expectedStay;
                            const totalAmount = dailyRate * days;
                            
                            const row = `
                                <tr data-id="${booking.id}" data-amount="${totalAmount}" data-name="Cabin ${booking.Cabin.cabinNumber} - ${booking.Cabin.cabinType}">
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input cabin-checkbox" type="checkbox" value="${booking.id}" id="cabin-${booking.id}">
                                            <label class="form-check-label" for="cabin-${booking.id}"></label>
                                        </div>
                                    </td>
                                    <td>Cabin ${booking.Cabin.cabinNumber}</td>
                                    <td>${booking.Cabin.cabinType}</td>
                                    <td>${formattedDate}</td>
                                    <td>${days}</td>
                                    <td>$${dailyRate.toFixed(2)}</td>
                                    <td>$${totalAmount.toFixed(2)}</td>
                                </tr>
                            `;
                            
                            $('#unbilled-cabins-list').append(row);
                        });
                        
                        $('#unbilled-cabins-card').show();
                    } else {
                        $('#unbilled-cabins-card').hide();
                    }
                },
                error: function(error) {
                    console.error('Error loading cabin bookings:', error);
                    $('#unbilled-cabins-card').hide();
                }
            });
        }
        
        // Handle select all appointments
        $('#select-all-appointments').on('change', function() {
            const isChecked = $(this).prop('checked');
            $('.appointment-checkbox').prop('checked', isChecked);
            updateAppointmentsInBill();
        });
        
        // Handle individual appointment selection
        $(document).on('change', '.appointment-checkbox', function() {
            updateAppointmentsInBill();
            
            // Update select all checkbox
            const allChecked = $('.appointment-checkbox:checked').length === $('.appointment-checkbox').length;
            $('#select-all-appointments').prop('checked', allChecked);
        });
        
        // Handle select all cabins
        $('#select-all-cabins').on('change', function() {
            const isChecked = $(this).prop('checked');
            $('.cabin-checkbox').prop('checked', isChecked);
            updateCabinBookingsInBill();
        });
        
        // Handle individual cabin booking selection
        $(document).on('change', '.cabin-checkbox', function() {
            updateCabinBookingsInBill();
            
            // Update select all checkbox
            const allChecked = $('.cabin-checkbox:checked').length === $('.cabin-checkbox').length;
            $('#select-all-cabins').prop('checked', allChecked);
        });
        
        // Update appointments in bill
        function updateAppointmentsInBill() {
            const selectedAppointments = [];
            
            $('.appointment-checkbox:checked').each(function() {
                const appointmentId = $(this).val();
                selectedAppointments.push(appointmentId);
            });
            
            // Update the hidden input
            $('#billing-appointment-ids').val(JSON.stringify(selectedAppointments));
            
            // Update all billing items
            updateAllBillingItems();
        }
        
        // Update cabin bookings in bill
        function updateCabinBookingsInBill() {
            const selectedBookings = [];
            const cabinItems = [];
            
            $('.cabin-checkbox:checked').each(function() {
                const bookingId = $(this).val();
                selectedBookings.push(bookingId);
                
                const $row = $(this).closest('tr');
                const amount = parseFloat($row.data('amount'));
                const name = $row.data('name');
                
                cabinItems.push({
                    id: bookingId,
                    type: 'cabin',
                    name: name,
                    price: amount
                });
            });
            
            // Update the hidden input
            $('#billing-cabin-booking-ids').val(JSON.stringify(selectedBookings));
            
            // Update all billing items
            updateAllBillingItems();
        }
        
        // Update all billing items
        function updateAllBillingItems() {
            // Get appointment items
            const appointmentItems = [];
            $('.appointment-checkbox:checked').each(function() {
                const appointmentId = $(this).val();
                const $row = $(this).closest('tr');
                const fee = parseFloat($row.data('fee'));
                const name = $row.data('name');
                
                appointmentItems.push({
                    id: appointmentId,
                    type: 'appointment',
                    name: name,
                    price: fee
                });
            });
            
            // Get cabin items
            const cabinItems = [];
            $('.cabin-checkbox:checked').each(function() {
                const bookingId = $(this).val();
                const $row = $(this).closest('tr');
                const amount = parseFloat($row.data('amount'));
                const name = $row.data('name');
                
                cabinItems.push({
                    id: bookingId,
                    type: 'cabin',
                    name: name,
                    price: amount
                });
            });
            
            // Get test items
            const testItems = [];
            $('#test-list tr').each(function() {
                const $row = $(this);
                const deliveryDate = $row[0].getAttribute('data-delivery-date') || '';
                
                testItems.push({
                    id: $row.data('id'),
                    type: 'test',
                    name: $row.data('name'),
                    price: parseFloat($row.data('price')),
                    priority: $row.data('priority'),
                    deliveryDate: deliveryDate
                });
            });
            
            // Combine all items
            const allItems = [...appointmentItems, ...cabinItems, ...testItems];
            $('#billing-items').val(JSON.stringify(allItems));
            
            // Update billing summary
            updateBillingSummary();
        }
        
        // Update the billing summary function to include cabin bookings
        function updateBillingSummary() {
            let totalAmount = 0;
            
            // Get current manual total amount if it was manually modified
            const currentManualTotal = parseFloat($('#total-amount-input').val()) || 0;
            const wasManuallySet = $('#total-amount-input').data('manual') === true;
            
            // If not manually modified, calculate from items
            if (!wasManuallySet) {
                // Calculate total amount from tests
                $('#test-list tr').each(function() {
                    totalAmount += parseFloat($(this).data('price'));
                });
                
                // Add fees from selected appointments
                $('.appointment-checkbox:checked').each(function() {
                    const fee = parseFloat($(this).closest('tr').data('fee'));
                    totalAmount += fee;
                });
                
                // Add fees from selected cabin bookings
                $('.cabin-checkbox:checked').each(function() {
                    const amount = parseFloat($(this).closest('tr').data('amount'));
                    totalAmount += amount;
                });
                
                // Update displayed values
                $('#total-amount').text('Tk ' + totalAmount.toFixed(2));
                $('#total-amount-input').val(totalAmount.toFixed(2));
            } else {
                // Use the manually entered amount
                totalAmount = currentManualTotal;
            }
            
            // Calculate discount
            const discountPercent = parseFloat($('#discount-percentage').val()) || 0;
            const discountAmount = (totalAmount * discountPercent / 100);
            const netPayable = totalAmount - discountAmount;
            
            // Update discount and net payable
            $('#discount-amount').text('Tk ' + discountAmount.toFixed(2));
            $('#discount-amount-input').val(discountAmount.toFixed(2));
            
            $('#net-payable').text('Tk ' + netPayable.toFixed(2));
            $('#net-payable-input').val(netPayable.toFixed(2));
            
            // Also update paid amount max value
            $('#paid-amount').attr('max', netPayable.toFixed(2));
            
            updateDueAmount();
        }
        
        // Update due amount when paid amount changes
        $('#paid-amount').on('input', function() {
            updateDueAmount();
        });
        
        // Handle reset button click
        $('#reset-total-btn').on('click', function() {
            // Remove manual flag
            $('#total-amount-input').data('manual', false);
            
            // Remove visual indicator
            $('#total-amount-input').removeClass('manual-input');
            
            // Recalculate all billing items based on selections
            updateAllBillingItems();
        });
        
        // Handle manual changes to total amount
        $('#total-amount-input').on('input', function() {
            // Mark as manually modified
            $(this).data('manual', true);
            
            // Add visual indicator that the value is manually set
            $(this).addClass('manual-input');
            
            // Recalculate discount and net payable based on manually entered amount
            recalculateBillingFromManualInput();
        });
        
        // Handle changes to discount percentage
        $('#discount-percentage').on('input', function() {
            // Recalculate discount and net payable
            recalculateBillingFromManualInput();
        });
        
        // Recalculate billing based on manual input
        function recalculateBillingFromManualInput() {
            const manualTotalAmount = parseFloat($('#total-amount-input').val()) || 0;
            const discountPercent = parseFloat($('#discount-percentage').val()) || 0;
            
            // Calculate discount amount based on manual total
            const discountAmount = (manualTotalAmount * discountPercent / 100);
            const netPayable = manualTotalAmount - discountAmount;
            
            // Update displayed values
            $('#discount-amount').text('Tk ' + discountAmount.toFixed(2));
            $('#discount-amount-input').val(discountAmount.toFixed(2));
            
            $('#net-payable').text('Tk ' + netPayable.toFixed(2));
            $('#net-payable-input').val(netPayable.toFixed(2));
            
            // Update paid amount max value
            $('#paid-amount').attr('max', netPayable.toFixed(2));
            
            updateDueAmount();
        }
        
        // Delete test from the list
        $(document).on('click', '.delete-test', function() {
            $(this).closest('tr').remove();
            updateAllBillingItems();
        });
        
        // Function to update due amount
        function updateDueAmount() {
            const netPayable = parseFloat($('#net-payable-input').val()) || 0;
            const paidAmount = parseFloat($('#paid-amount').val()) || 0;
            
            const dueAmount = netPayable - paidAmount;
            
            $('#due-amount').text('Tk ' + dueAmount.toFixed(2));
            $('#due-amount-input').val(dueAmount.toFixed(2));
            
            // Update status indicator based on payment status
            if (paidAmount >= netPayable) {
                $('#payment-status').html('<span class="badge bg-success">Paid</span>');
            } else {
                $('#payment-status').html('<span class="badge bg-danger">Due</span>');
            }
        }
        
        // Submit appointment form
        $('#appointment-form').on('submit', function(e) {
            e.preventDefault();
            
            $.ajax({
                url: '/appointments',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    alert('Appointment scheduled successfully');
                    $('#appointment-form')[0].reset();
                    $('#patient-select').val(null).trigger('change');
                    $('#doctor-select').val(null).trigger('change');
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not schedule appointment'));
                }
            });
        });
        
        // Submit cabin allocation form
        $('#cabin-form').on('submit', function(e) {
            e.preventDefault();
            
            // Get the patient ID
            const patientId = $('#billing-patient-id').val();
            if (!patientId) {
                alert('Please select a patient first');
                return;
            }
            
            // Add patient ID to form data
            const formData = $(this).serialize() + '&patientId=' + patientId;
            
            $.ajax({
                url: '/cabins/booking',
                type: 'POST',
                data: formData,
                success: function(response) {
                    alert('Cabin allocated successfully');
                    $('#cabin-form')[0].reset();
                    $('#cabin-select').val(null).trigger('change');
                    
                    // Reload unbilled cabin bookings
                    loadUnbilledCabinBookings(patientId);
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not allocate cabin'));
                }
            });
        });
        
        // Submit billing form
        $('#billing-form').on('submit', function(e) {
            e.preventDefault();
            
            // Validate patient selection
            if (!$('#billing-patient-id').val()) {
                alert('Please select a patient');
                return;
            }
            
            // Check if total amount is 0
            const totalAmount = parseFloat($('#total-amount-input').val() || 0);
            if (totalAmount === 0) {
                alert('You can\'t Bill - Total amount is 0');
                return;
            }
            
            // Update all billing items to include appointments, cabins, and tests
            updateAllBillingItems();
            
            $.ajax({
                url: '/billing',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    alert('Billing completed successfully');
                    window.location.href = '/billing/receipt/' + response.id;
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not complete billing'));
                }
            });
        });
        
        // Submit patient form
        $('#patient-form').on('submit', function(e) {
            e.preventDefault();
            
            $.ajax({
                url: '/patients',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    // Close modal
                    $('#addPatientModal').modal('hide');
                    
                    // Add patient to select and select it
                    const newOption = new Option(`${response.name} (${response.patientId})`, response.id, true, true);
                    $('#patient-select').append(newOption).trigger('change');
                    
                    // Set patient ID in billing form
                    $('#billing-patient-id').val(response.id);
                    
                    // Reset form
                    $('#patient-form')[0].reset();
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not add patient'));
                }
            });
        });
        
        // Submit doctor form
        $('#doctor-form').on('submit', function(e) {
            e.preventDefault();
            
            $.ajax({
                url: '/doctors',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    // Close modal
                    $('#addDoctorModal').modal('hide');
                    
                    // Add doctor to select and select it
                    const newOption = new Option(`Dr. ${response.name} (${response.specialization})`, response.id, true, true);
                    $('#doctor-select').append(newOption).trigger('change');
                    
                    // Reset form
                    $('#doctor-form')[0].reset();
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not add doctor'));
                }
            });
        });
        
        // Submit cabin form
        $('#cabin-form-modal').on('submit', function(e) {
            e.preventDefault();
            
            $.ajax({
                url: '/cabins',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    // Close modal
                    $('#addCabinModal').modal('hide');
                    
                    // Add cabin to select and select it
                    const newOption = new Option(`Cabin ${response.cabinNumber} - ${response.cabinType} (${response.status})`, response.id, true, true);
                    $('#cabin-select').append(newOption).trigger('change');
                    
                    // Reset form
                    $('#cabin-form-modal')[0].reset();
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not add cabin'));
                }
            });
        });
        
        // Submit test form
        $('#test-form-modal').on('submit', function(e) {
            e.preventDefault();
            
            $.ajax({
                url: '/tests',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    // Close modal
                    $('#addTestModal').modal('hide');
                    
                    // Add test to select and select it
                    const newOption = new Option(response.name, response.id, true, true);
                    newOption.dataset.price = response.price;
                    $('#test-select').append(newOption).trigger('change');
                    
                    // Reset form
                    $('#test-form-modal')[0].reset();
                },
                error: function(error) {
                    alert('Error: ' + (error.responseJSON?.message || 'Could not add test'));
                }
            });
        });
    });
</script>