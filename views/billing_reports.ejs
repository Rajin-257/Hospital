<%- include('partials/header') %>
<%- include('partials/navbar') %>

<div class="container py-4">
  <div class="row mb-4">
    <div class="col">
      <div class="d-flex justify-content-between align-items-center">
        <h2>
          <% if (reportType === 'partial') { %>
            <i class="fas fa-wallet me-2 text-warning"></i>Partial Payment Bills
          <% } else if (reportType === 'paid') { %>
            <i class="fas fa-check-circle me-2 text-success"></i>Fully Paid Bills
          <% } else if (reportType === 'due') { %>
            <i class="fas fa-exclamation-circle me-2 text-danger"></i>Due Payment Bills
          <% } else if (reportType === 'daily') { %>
            <i class="fas fa-calendar-day me-2 text-primary"></i>Daily Billing Report
            <small class="text-muted ms-2">(<%= new Date().toLocaleDateString() %>)</small>
          <% } else if (reportType === 'all-payment-types') { %>
            <i class="fas fa-money-check-alt me-2 text-info"></i>All Payment Types Report
          <% } else { %>
            <i class="fas fa-file-invoice-dollar me-2 text-primary"></i>All Billing Reports
          <% } %>
        </h2>
        <div>
          <button class="btn btn-outline-secondary" id="print-report">
            <i class="fas fa-print me-1"></i> Print Report
          </button>
          <a href="/reports" class="btn btn-outline-primary ms-2">
            <i class="fas fa-arrow-left me-1"></i> Back to Reports
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Filter Section - Hidden for Daily Reports -->
  <% if (reportType !== 'daily') { %>
  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">Filter Reports</h5>
        </div>
        <div class="card-body">
          <form id="filterForm" method="GET" class="row g-3">
            <div class="col-md-3">
              <label for="startDate" class="form-label">From Date</label>
              <input type="date" class="form-control" id="startDate" name="startDate" value="<%= locals.startDate || '' %>">
            </div>
            <div class="col-md-3">
              <label for="endDate" class="form-label">To Date</label>
              <input type="date" class="form-control" id="endDate" name="endDate" value="<%= locals.endDate || '' %>">
            </div>
            <div class="col-md-3">
              <label for="searchType" class="form-label">Search By</label>
              <select class="form-select" id="searchType" name="searchType">
                <option value="all" selected>All</option>
                <option value="billNumber">Bill Number</option>
                <option value="patientId">Patient ID</option>
                <option value="patientName">Patient Name</option>
              </select>
            </div>
            <div class="col-md-3">
              <label for="searchQuery" class="form-label">Search Term</label>
              <input type="text" class="form-control" id="searchQuery" name="searchQuery" value="<%= locals.searchQuery || '' %>" placeholder="Enter search term...">
            </div>
            <div class="col-12 text-end">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-filter me-1"></i> Apply Filters
              </button>
              <button type="reset" class="btn btn-outline-secondary ms-2">
                <i class="fas fa-redo me-1"></i> Reset
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Summary Section - Show for all report types -->
  <div class="row mb-4 screen-only">
    <div class="col">
      <div class="card bg-light">
        <div class="card-body">
          <h5 class="card-title">
            <% if (reportType === 'daily') { %>
              Today's Summary
            <% } else { %>
              <% if (locals.startDate && locals.endDate) { %>
                Summary (<%= new Date(locals.startDate).toLocaleDateString() %> to <%= new Date(locals.endDate).toLocaleDateString() %>)
              <% } else { %>
                Current Summary
              <% } %>
            <% } %>
          </h5>
          <div class="row">
            <div class="col-md-3">
              <div class="mb-2">
                <small class="text-muted">Total Bills</small>
                <h4><%= bills ? bills.length : 0 %></h4>
              </div>
            </div>
            <div class="col-md-3">
              <div class="mb-2">
                <small class="text-muted">Total Amount</small>
                <h4> <%= (bills ? bills.reduce((sum, bill) => sum + parseFloat(bill.totalAmount || 0), 0) : 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h4>
              </div>
            </div>
            <div class="col-md-3">
              <div class="mb-2">
                <small class="text-muted">Total Paid</small>
                <h4 class="text-success"> <%= (bills ? bills.reduce((sum, bill) => sum + parseFloat(bill.paidAmount || 0), 0) : 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h4>
              </div>
            </div>
            <div class="col-md-3">
              <div class="mb-2">
                <small class="text-muted">Total Due</small>
                <h4 class="text-danger"> <%= (bills ? bills.reduce((sum, bill) => sum + parseFloat(bill.dueAmount || 0), 0) : 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h4>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Billing Records</h5>
      <div>
        <input type="text" id="table-search" class="form-control form-control-sm" placeholder="Quick search in results...">
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive print-friendly">
        <table class="table table-hover" id="billingTable">
          <thead class="table-light">
            <tr>
              <th>Bill #</th>
              <th>Date</th>
              <th>Patient ID</th>
              <th>Patient</th>
              <th>Total</th>
              <th>Discount</th>
              <th>Net</th>
              <th>Paid</th>
              <th>Due</th>
              <th>Status</th>
              <th class="no-print">Actions</th>
            </tr>
          </thead>
          <tbody>
            <% if (bills && bills.length > 0) { %>
              <% bills.forEach(bill => { %>
                <tr class="<%= bill.status === 'paid' ? 'table-success' : (bill.status === 'partial' ? 'table-warning' : 'table-danger') %>">
                  <td><%= bill.billNumber || 'N/A' %></td>
                  <td><%= bill.billDate ? new Date(bill.billDate).toLocaleDateString() : 'N/A' %></td>
                  <td><%= bill.Patient ? bill.Patient.patientId : 'N/A' %></td>
                  <td><%= bill.Patient ? bill.Patient.name : 'Unknown' %></td>
                  <td> <%= parseFloat(bill.totalAmount || 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></td>
                  <td> <%= parseFloat(bill.discountAmount || 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></td>
                  <td> <%= parseFloat(bill.netPayable || 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></td>
                  <td> <%= parseFloat(bill.paidAmount || 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></td>
                  <td class="<%= parseFloat(bill.dueAmount || 0) > 0 ? 'text-danger' : '' %>">
                    <%= parseFloat(bill.dueAmount || 0) > 0 ? ' ' + parseFloat(bill.dueAmount || 0).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}) : 'Paid' %>
                  </td>
                  <td>
                    <span class="badge bg-<%= bill.status === 'paid' ? 'success' : (bill.status === 'partial' ? 'warning' : 'danger') %>">
                      <%= bill.status === 'paid' ? 'Paid' : (bill.status === 'partial' ? 'Partial' : 'Due') %>
                    </span>
                  </td>
                  <td class="no-print">
                    <a href="/billing/receipt/<%= bill.id %>" class="btn btn-sm btn-outline-primary">
                      <i class="fas fa-eye"></i>
                    </a>
                    <a href="/billing/edit/<%= bill.id %>" class="btn btn-sm btn-outline-secondary">
                      <i class="fas fa-edit"></i>
                    </a>
                    <button type="button" class="btn btn-sm btn-outline-danger delete-bill" data-id="<%= bill.id %>">
                      <i class="fas fa-trash"></i>
                    </button>
                  </td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="11" class="text-center">No billing records found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Add this modal for delete confirmation -->
<div class="modal fade" id="deleteBillModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this bill? This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Normal view style */
  .screen-only {
    display: block;
  }
  
  .print-only {
    display: none;
  }
  
  .no-print {
    display: table-cell;
  }
  
  /* Creative Compact Print Design */
  @media print {
    /* Reset and optimize basic layout */
    * {
      box-sizing: border-box;
      margin: 0 !important;
      padding: 0 !important;
    }
    
    body {
      font-family: 'Arial', 'Helvetica', sans-serif;
      font-size: 14px;
      line-height: 1.1;
      color: #000;
      background: #fff;
      padding: 10px !important;
    }
    
    /* Hide screen-only elements */
    .screen-only {
      display: none !important;
    }
    
    /* Show print-only elements */
    .print-only {
      display: block !important;
    }
    
    /* Hide no-print elements */
    .no-print {
      display: none !important;
    }
    
    .card {
      box-shadow: none !important;
      border: none !important;
    }
    
    .container {
      width: 100%;
      max-width: 100%;
    }
    
    /* Hide unnecessary elements */
    #filterForm, .form-control, button, a.btn, .card-header, .row.mb-4:not(.print-only) {
      display: none !important;
    }
    
    /* Creative Header Design */
    .print-header {
      display: block !important;
      text-align: center;
      background: #000;
      color: #000000;
    }
    
    .print-header h2 {
      font-size: 16px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    .print-header p {
      font-size: 12px;
      font-style: italic;
    }
    
    .print-header h3 {
      font-size: 14px;
      font-weight: bold;
      background: #fff;
      color: #000;
      display: inline-block;
    }
    
    .print-header hr {
      border: none;
      border-top: 1px solid #666;
    }
    
    /* Compact Summary Box */
    .print-summary {
      border: 1px solid #000;
      background: #f9f9f9;
      page-break-inside: avoid;
      font-size: 12px;
    }
    
    .print-summary > div {
      display: flex !important;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .print-summary > div > div {
      flex: 1;
      min-width: 120px;
      text-align: center;
      border-right: 1px solid #000000;
    }
    
    .print-summary > div > div:last-child {
      border-right: none;
    }
    
    .print-summary strong {
      display: block;
      font-size: 10px;
      color: #000000;
      text-transform: uppercase;
    }
    
    /* Ultra-Compact Table Design */
    /* .print-friendly {
      
    } */
    
    table#billingTable {
      width: 100%;
      border-collapse: collapse;
      font-size: 12px;
      padding: 10px !important;
    }
    
    table#billingTable thead {
      display: table-header-group;
    }
    
    table#billingTable th {
      background: #000 !important;
      color: #000000 !important;
      border: none;
      font-weight: bold;
      text-align: center;
      font-size:10px;
      line-height: 1.1;
      text-transform: uppercase;
      letter-spacing: 0.3px;
      vertical-align: middle;
    }
    
    table#billingTable td {
      border: none;
      border-right: 1px solid #000000;
      border-bottom: 1px solid #000000;
      page-break-inside: avoid;
      font-size: 12px;
      line-height: 1.1;
      vertical-align: middle;
      text-align: center;
      padding: 7px !important;
    }
    
    table#billingTable td:last-child {
      border-right: none;
    }
    
    /* Optimized Column Widths for Maximum Space Efficiency */
    table#billingTable th:nth-child(1),
    table#billingTable td:nth-child(1) {
      width: 8%;
      font-weight: bold;
      text-align: center;
    }
    
    table#billingTable th:nth-child(2),
    table#billingTable td:nth-child(2) {
      width: 10%;
      text-align: center;
    }
    
    table#billingTable th:nth-child(3),
    table#billingTable td:nth-child(3) {
      width: 8%;
      font-weight: bold;
      text-align: center;
      color: #000000;
    }
    
    table#billingTable th:nth-child(4),
    table#billingTable td:nth-child(4) {
      width: 18%;
      text-align: center;
      font-weight: bold;
    }
    
    table#billingTable th:nth-child(5),
    table#billingTable td:nth-child(5),
    table#billingTable th:nth-child(6),
    table#billingTable td:nth-child(6),
    table#billingTable th:nth-child(7),
    table#billingTable td:nth-child(7),
    table#billingTable th:nth-child(8),
    table#billingTable td:nth-child(8),
    table#billingTable th:nth-child(9),
    table#billingTable td:nth-child(9) {
      width: 10%;
      text-align: center;
      font-family: 'Courier New', monospace;
    }
    
    table#billingTable th:nth-child(10),
    table#billingTable td:nth-child(10) {
      width: 8%;
      text-align: center;
    }
    
    /* Alternating Row Patterns for Better Readability */
    table#billingTable tbody tr:nth-child(odd) {
      background: #f8f9fa;
    }
    
    table#billingTable tbody tr:nth-child(even) {
      background: #fff;
    }
    
    /* Creative Status Badges */
    .badge {
      font-weight: bold;
      color: #000 !important;
      background: #fff !important;
      font-size: 10px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    /* Status-specific styling */
    table#billingTable tbody tr td:nth-child(10) .badge {
      position: relative;
    }
    
    /* Add visual indicators for different statuses */
    table#billingTable tbody tr.table-success td:first-child::before {
      content: "✓";
      color: #000;
      font-weight: bold;
    }
    
    table#billingTable tbody tr.table-warning td:first-child::before {
      content: "⚠";
      color: #000;
      font-weight: bold;
    }
    
    table#billingTable tbody tr.table-danger td:first-child::before {
      content: "⚡";
      color: #000;
      font-weight: bold;
    }
    
    /* Remove colored backgrounds, use patterns instead */
    .table-danger, .table-warning, .table-success {
      background: transparent !important;
    }
    
    .table-danger td {
      background: #fff !important;
    }
    
    .table-warning td {
      background: #f8f9fa !important;
    }
    
    .table-success td {
      background: #f0f0f0 !important;
    }
    
    /* Currency formatting enhancement */
    table#billingTable td:nth-child(5),
    table#billingTable td:nth-child(6),
    table#billingTable td:nth-child(7),
    table#billingTable td:nth-child(8),
    table#billingTable td:nth-child(9) {
      font-weight: bold;
    }
    
    /* Due amount highlighting */
    table#billingTable td.text-danger {
      color: #000 !important;
      font-weight: bold;
      text-decoration: underline;
    }
    
    /* Page settings for maximum content */
    @page {
      margin: 0;
      size: A4;
    }
    
    /* Page break controls */
    .page-break-after {
      page-break-after: always;
    }
    
    table#billingTable {
      page-break-inside: auto;
    }
    
    table#billingTable thead {
      display: table-header-group;
    }
    
    table#billingTable tbody tr {
      page-break-inside: avoid;
      page-break-after: auto;
    }
    
    /* Compact table headers with abbreviations */
    table#billingTable th:nth-child(1)::after { content: ""; }
    table#billingTable th:nth-child(2)::after { content: ""; }
    table#billingTable th:nth-child(3)::after { content: ""; }
    table#billingTable th:nth-child(4)::after { content: ""; }
    table#billingTable th:nth-child(5)::after { content: "(Tk)"; }
    table#billingTable th:nth-child(6)::after { content: "(Tk)"; }
    table#billingTable th:nth-child(7)::after { content: "(Tk)"; }
    table#billingTable th:nth-child(8)::after { content: "(Tk)"; }
    table#billingTable th:nth-child(9)::after { content: "(Tk)"; }
  }
  
  /* Hide print header in normal view */
  .print-header {
    display: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Quick table search functionality
    document.getElementById('table-search').addEventListener('keyup', function() {
      const searchValue = this.value.toLowerCase();
      const rows = document.querySelectorAll('#billingTable tbody tr');
      
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchValue) ? '' : 'none';
      });
    });
    
    // Print functionality
    document.getElementById('print-report').addEventListener('click', function() {
      // Create print header that will only be visible when printing
      const printHeader = document.createElement('div');
      printHeader.className = 'print-header';
      
      // Get the report title based on the type
      let reportTitle = 'All Billing Reports';
      const reportType = '<%= reportType %>'; // Get the report type from EJS
      
      if (reportType === 'partial') {
        reportTitle = 'Partial Payment Bills Report';
      } else if (reportType === 'paid') {
        reportTitle = 'Fully Paid Bills Report';
      } else if (reportType === 'due') {
        reportTitle = 'Due Payment Bills Report';
      } else if (reportType === 'daily') {
        reportTitle = 'Daily Billing Report (' + new Date().toLocaleDateString() + ')';
      } else if (reportType === 'all-payment-types') {
        reportTitle = 'All Payment Types Report';
      }
      
      // Get summary data
      const totalBills = document.querySelectorAll('#billingTable tbody tr:not(.no-results)').length;
      
      // Calculate totals
      let totalAmount = 0;
      let totalDiscount = 0;
      let totalPaid = 0;
      let totalDue = 0;
      
      document.querySelectorAll('#billingTable tbody tr:not(.no-results)').forEach(row => {
        // Get the cells containing the values (adjust indices if needed)
        const amountCell = row.cells[4]; // Total column
        const discountCell = row.cells[5]; // Discount column
        const paidCell = row.cells[7]; // Paid column
        const dueCell = row.cells[8]; // Due column
        
        // Extract numeric values (strip "Tk " and commas)
        if (amountCell) {
          const amount = parseFloat(amountCell.textContent.replace(' ', '').replace(/,/g, '')) || 0;
          totalAmount += amount;
        }
        
        if (discountCell) {
          const discount = parseFloat(discountCell.textContent.replace(' ', '').replace(/,/g, '')) || 0;
          totalDiscount += discount;
        }
        
        if (paidCell) {
          const paid = parseFloat(paidCell.textContent.replace(' ', '').replace(/,/g, '')) || 0;
          totalPaid += paid;
        }
        
        if (dueCell && dueCell.textContent !== 'Paid') {
          const due = parseFloat(dueCell.textContent.replace(' ', '').replace(/,/g, '')) || 0;
          totalDue += due;
        }
      });
      
      // Format the currency values
      const formatCurrency = (value) => {
        return value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
      };
      
      // Get date range information for print header
      let dateRangeInfo = '';
      const startDate = '<%= locals.startDate || "" %>';
      const endDate = '<%= locals.endDate || "" %>';
      
      if (reportType === 'daily') {
        dateRangeInfo = `<p><strong>Report Date: ${new Date().toLocaleDateString()}</strong></p>`;
      } else if (startDate && endDate) {
        dateRangeInfo = `<p><strong>Date Range: ${new Date(startDate).toLocaleDateString()} to ${new Date(endDate).toLocaleDateString()}</strong></p>`;
      } else if (startDate) {
        dateRangeInfo = `<p><strong>From Date: ${new Date(startDate).toLocaleDateString()}</strong></p>`;
      } else if (endDate) {
        dateRangeInfo = `<p><strong>Up to Date: ${new Date(endDate).toLocaleDateString()}</strong></p>`;
      }
      
      printHeader.innerHTML = `
        <h2><%= locals.settings && settings.medical_name ? settings.medical_name : 'HOSPITAL MANAGEMENT SYSTEM' %> </h2>
        <p><%= locals.settings && settings.address ? settings.address : 'No Address' %></p>
        <p><%= locals.settings && settings.phone ? settings.phone : 'No Phone' %></p>
        <hr>
        <h3>${reportTitle}</h3>
        ${dateRangeInfo}
        <p>Generated on: ${new Date().toLocaleString()}</p>
      `;
      
      // Create a print-only summary section
      const printSummary = document.createElement('div');
      printSummary.className = 'print-only';
      printSummary.innerHTML = `
        <div class="row mb-4 print-only">
          <div class="col">
            <div class="print-summary" style="margin: 20px 0; padding: 10px; border: 1px solid #ddd; background-color: #f9f9f9;">
              <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                <div style="flex: 1;">
                  <strong>Total Bills:</strong> ${totalBills}
                </div>
                <div style="flex: 1;">
                  <strong>Total Amount:</strong>  Tk ${formatCurrency(totalAmount)}
                </div>
                <div style="flex: 1;">
                  <strong>Total Discount: </strong> Tk ${formatCurrency(totalDiscount)}
                </div>
              </div>
              <div style="display: flex; justify-content: space-between;">
                <div style="flex: 1;">
                  <strong>Total Paid:  </strong> Tk ${formatCurrency(totalPaid)}
                </div>
                <div style="flex: 1;">
                  <strong>Total Due:  </strong> Tk ${formatCurrency(totalDue)}
                </div>
                <div style="flex: 1;">
                  <strong>Payment Rate: </strong> ${totalAmount > 0 ? Math.round((totalPaid / totalAmount) * 100) : 0}%
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Insert the print header at the top of the container
      const container = document.querySelector('.container');
      container.insertBefore(printHeader, container.firstChild);
      
      // Insert the print summary after the header
      container.insertBefore(printSummary, printHeader.nextSibling);
      
      // Clean the table for printing - remove action buttons
      const actionCells = document.querySelectorAll('#billingTable td:last-child');
      actionCells.forEach(cell => {
        cell.setAttribute('data-temp-html', cell.innerHTML);
        cell.innerHTML = '';
      });
      
      window.print();
      
      // Restore table cells
      actionCells.forEach(cell => {
        cell.innerHTML = cell.getAttribute('data-temp-html');
        cell.removeAttribute('data-temp-html');
      });
      
      // Remove the print header and summary after printing
      container.removeChild(printHeader);
      container.removeChild(printSummary);
    });

    // Reset form and redirect to base URL
    document.querySelector('button[type="reset"]').addEventListener('click', function(e) {
      e.preventDefault();
      window.location.href = window.location.pathname;
    });

    // Set default dates if not set
    if (!document.getElementById('startDate').value) {
      const today = new Date();
      const lastMonth = new Date();
      lastMonth.setMonth(lastMonth.getMonth() - 1);
      
      document.getElementById('startDate').value = lastMonth.toISOString().slice(0, 10);
      document.getElementById('endDate').value = today.toISOString().slice(0, 10);
    }

    // Delete bill functionality
    let billIdToDelete = null;
    
    // Show confirmation modal when delete button is clicked
    $(".delete-bill").click(function() {
      billIdToDelete = $(this).data("id");
      $("#deleteBillModal").modal("show");
    });
    
    // Handle confirm delete button
    $("#confirmDeleteBtn").click(function() {
      if (billIdToDelete) {
        $.ajax({
          url: `/billing/${billIdToDelete}`,
          type: "DELETE",
          success: function(result) {
            $("#deleteBillModal").modal("hide");
            // Show success message and reload page
            alert("Bill deleted successfully");
            location.reload();
          },
          error: function(xhr, status, error) {
            $("#deleteBillModal").modal("hide");
            alert("Error deleting bill: " + (xhr.responseJSON?.message || error));
          }
        });
      }
    });
  });
</script>

<%- include('partials/footer') %> 