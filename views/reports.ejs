<%- include('partials/header') %>
<%- include('partials/navbar') %>

<div class="container py-4">
  <div class="row mb-4">
    <div class="col">
      <h2><i class="fas fa-chart-line me-2"></i>Hospital Records Overview</h2>
      <p class="text-muted">View statistics and reports for hospital operations</p>
    </div>
  </div>

  <!-- Entity Count Cards -->
  <div class="row mb-4">
    <% if (locals.isFeatureVisible('Patient Reports')) { %>
    <!-- Patient Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="patient-card">
      <a href="/patients" class="text-decoration-none">
        <div class="card h-100 shadow-sm hover-card">
          <div class="card-body">
            <h5 class="card-title text-primary">Patients</h5>
            <div class="d-flex align-items-center mb-2">
              <i class="fas fa-user-injured fa-2x text-primary me-3"></i>
              <div>
                <h3 id="totalPatients" class="mb-0">-</h3>
                <small class="text-muted">Total Patients</small>
              </div>
            </div>
            <div class="mt-2">
              <span id="newPatients">-</span>
              <small class="text-muted"> new in last 30 days</small>
            </div>
          </div>
          <div class="card-footer bg-light text-center">
            <small class="text-muted">Click to view all patients</small>
          </div>
        </div>
      </a>
    </div>
    <% } %>
    
    <% if (locals.isFeatureVisible('Appointment Reports')) { %>
    <!-- Doctor Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="doctor-card">
      <div class="card h-100 shadow-sm hover-card">
        <div class="card-body">
          <a href="/doctors" class="text-decoration-none">
            <h5 class="card-title text-secondary">Doctors</h5>
            <div class="d-flex align-items-center mb-2">
              <i class="fas fa-user-md fa-2x text-secondary me-3"></i>
              <div>
                <h3 id="totalDoctors" class="mb-0">-</h3>
                <small class="text-muted">Total Doctors</small>
              </div>
            </div>
          </a>
        </div>
        <div class="card-footer bg-light text-center">
          <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="doctorReportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-file-alt me-1"></i> Doctor Reports
            </button>
            <ul class="dropdown-menu" aria-labelledby="doctorReportsDropdown">
              <li><a class="dropdown-item" href="/doctors">View All Doctors</a></li>
              <li><a class="dropdown-item" href="/commissions">Doctor Commissions</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Commission Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="commission-card">
      <div class="card h-100 shadow-sm hover-card">
        <div class="card-body">
          <h5 class="card-title text-purple">Doctor Commissions</h5>
          <div class="d-flex align-items-center mb-2">
            <i class="fas fa-hand-holding-usd fa-2x text-purple me-3"></i>
            <div>
              <h3 id="totalCommissions" class="mb-0">-</h3>
              <small class="text-muted">Commission Records</small>
            </div>
          </div>
          <div class="mt-2">
            <span id="totalCommissionAmount">-</span>
            <small class="text-muted"> total commission</small>
          </div>
        </div>
        <div class="card-footer bg-light text-center">
          <a href="/commissions" class="btn btn-sm btn-outline-primary">View All Commissions</a>
        </div>
      </div>
    </div>
    
    <!-- Appointment Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="appointment-card">
      <div class="card h-100 shadow-sm hover-card appointment-card">
        <div class="card-body">
          <h5 class="card-title text-danger">Appointments</h5>
          <div class="d-flex align-items-center mb-2">
            <i class="fas fa-calendar-check fa-2x text-danger me-3"></i>
            <div>
              <h3 id="totalAppointments" class="mb-0">-</h3>
              <small class="text-muted">Total Appointments</small>
            </div>
          </div>
          <div class="mt-2">
            <span id="pendingAppointments">-</span>
            <small class="text-muted"> Not Billed</small>
          </div>
        </div>
        <div class="card-footer bg-light text-center">
          <button class="btn btn-sm btn-outline-danger show-unbilled-appointments-btn">
            <i class="fas fa-list-alt me-1"></i> Show Not Billed Appointments
          </button>
        </div>
      </div>
    </div>
    <% } %>
    
    <% if (locals.isFeatureVisible('Billing Reports')) { %>
    <!-- Billing Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="billing-card">
      <div class="card h-100 shadow-sm hover-card">
        <div class="card-body">
          <h5 class="card-title text-success">Billing</h5>
          <div class="d-flex align-items-center mb-2">
            <i class="fas fa-file-invoice-dollar fa-2x text-success me-3"></i>
            <div>
              <h3 id="totalBillings" class="mb-0">-</h3>
              <small class="text-muted">Total Billings</small>
            </div>
          </div>
          <div class="mt-2">
            <span id="totalRevenue">-</span>
            <small class="text-muted"> revenue</small>
          </div>
        </div>
        <div class="card-footer bg-light text-center">
          <div class="dropup">
            <button class="btn btn-sm btn-outline-success dropdown-toggle" type="button" id="billingReportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-file-alt me-1"></i> Billing Reports
            </button>
            <ul class="dropdown-menu" aria-labelledby="billingReportsDropdown">
              <li><a class="dropdown-item" href="/reports/billing/partial">Partial Payments</a></li>
              <li><a class="dropdown-item" href="/reports/billing/paid">Fully Paid</a></li>
              <li><a class="dropdown-item" href="/reports/billing/due">Due Payments</a></li>
              <li><a class="dropdown-item" href="/reports/billing/all-payment-types">All Payment Types</a></li>
              <li><a class="dropdown-item" href="/reports/billing/daily">Daily Billing Report</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <!-- Daily Billing Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="daily-billing-card">
      <div class="card h-100 shadow-sm hover-card">
        <div class="card-body">
          <h5 class="card-title text-primary">Daily Billing</h5>
          <div class="d-flex align-items-center mb-2">
            <i class="fas fa-calendar-day fa-2x text-primary me-3"></i>
            <div>
              <h3 id="dailyBillingCount" class="mb-0">-</h3>
              <small class="text-muted">Today's Invoices</small>
            </div>
          </div>
          <div class="mt-2">
            <span id="dailyBillingAmount">-</span>
            <small class="text-muted"> revenue today</small>
          </div>
        </div>
        <div class="card-footer bg-light text-center">
          <a href="/reports/billing/daily" class="btn btn-sm btn-outline-primary">
            <i class="fas fa-file-alt me-1"></i> View Daily Report
          </a>
        </div>
      </div>
    </div>

    <!-- Due Invoice Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="due-invoice-card">
      <div class="card h-100 shadow-sm hover-card">
        <div class="card-body">
          <h5 class="card-title text-danger">Due Invoices</h5>
          <div class="d-flex align-items-center mb-2">
            <i class="fas fa-exclamation-circle fa-2x text-danger me-3"></i>
            <div>
              <h3 id="dueInvoiceCount" class="mb-0">-</h3>
              <small class="text-muted">Unpaid Invoices</small>
            </div>
          </div>
          <div class="mt-2">
            <span id="dueInvoiceAmount">-</span>
            <small class="text-muted"> amount due</small>
          </div>
        </div>
        <div class="card-footer bg-light text-center">
          <a href="/reports/billing/due" class="btn btn-sm btn-outline-danger">
            <i class="fas fa-file-alt me-1"></i> View Due Invoices
          </a>
        </div>
      </div>
    </div>
    <% } %>
    
    <% if (locals.isFeatureVisible('Test Reports')) { %>
    <!-- Test Request Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="test-card">
      <div class="card h-100 shadow-sm hover-card test-card">
        <div class="card-body">
          <h5 class="card-title text-info">Tests request</h5>
          <div class="d-flex align-items-center mb-2">
            <i class="fas fa-vial fa-2x text-info me-3"></i>
            <div>
              <h3 id="totalTests" class="mb-0">-</h3>
              <small class="text-muted">Total Test Request</small>
            </div>
          </div>
          <div class="mt-2">
            <span id="pendingTests">-</span>
            <small class="text-muted"> tests Not Billed</small>
          </div>
        </div>
        <div class="card-footer bg-light text-center">
          <div class="dropdown">
            <button class="btn btn-sm btn-outline-info dropdown-toggle" type="button" id="testReportsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-list-alt me-1"></i> Test Reports
            </button>
            <ul class="dropdown-menu" aria-labelledby="testReportsDropdown">
              <li><button class="dropdown-item show-unbilled-tests-btn">Show Not Billed Tests</button></li>
              <li><a class="dropdown-item" href="/commissions">Doctor Commissions</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <% } %>
    
    <% if (locals.isFeatureVisible('Billing Reports')) { %>
    <!-- Cabin Card -->
    <div class="col-md-4 col-lg-3 mb-3" id="cabin-card">
      <a href="/cabins" class="text-decoration-none">
        <div class="card h-100 shadow-sm hover-card">
          <div class="card-body">
            <h5 class="card-title text-warning">Cabins</h5>
            <div class="d-flex align-items-center mb-2">
              <i class="fas fa-bed fa-2x text-warning me-3"></i>
              <div>
                <h3 id="totalBookings" class="mb-0">-</h3>
                <small class="text-muted">Total Bookings</small>
              </div>
            </div>
            <div class="mt-2">
              <span id="activeBookings">-</span>
              <small class="text-muted"> cabins currently occupied</small>
            </div>
          </div>
          <div class="card-footer bg-light text-center">
            <small class="text-muted">Click to view all cabins</small>
          </div>
        </div>
      </a>
    </div>
    <% } %>
  </div>

  <!-- Unbilled Appointments Section -->
  <% if (locals.isFeatureVisible('Appointment Reports')) { %>
  <div class="card mt-4 d-none" id="unbilled-appointments-section">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0"><i class="fas fa-calendar-check me-2"></i>Unbilled Appointments</h5>
      <div>
        <button class="btn btn-sm btn-outline-secondary me-2" id="print-appointments-btn">
          <i class="fas fa-print me-1"></i> Print
        </button>
        <button class="btn btn-sm btn-outline-danger" id="close-appointments-btn">
          <i class="fas fa-times me-1"></i> Close
        </button>
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive print-friendly">
        <table class="table table-hover" id="unbilled-appointments-table">
          <thead class="table-light">
            <tr>
              <th>Date</th>
              <th>Time</th>
              <th>Patient</th>
              <th>Doctor</th>
              <th>Status</th>
              <th>Fee</th>
              <th class="no-print">Action</th>
            </tr>
          </thead>
          <tbody id="unbilled-appointments-list">
            <!-- Unbilled appointments will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Unbilled Tests Section -->
  <% if (locals.isFeatureVisible('Test Reports')) { %>
  <div class="card mt-4 d-none" id="unbilled-tests-section">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0"><i class="fas fa-vial me-2"></i>Unbilled Tests</h5>
      <div>
        <button class="btn btn-sm btn-outline-secondary me-2" id="print-tests-btn">
          <i class="fas fa-print me-1"></i> Print
        </button>
        <button class="btn btn-sm btn-outline-danger" id="close-tests-btn">
          <i class="fas fa-times me-1"></i> Close
        </button>
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive print-friendly">
        <table class="table table-hover" id="unbilled-tests-table">
          <thead class="table-light">
            <tr>
              <th>Date</th>
              <th>Patient</th>
              <th>Test</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Delivery Option</th>
              <th>Delivery Date</th>
              <th>Price</th>
              <th class="no-print">Action</th>
            </tr>
          </thead>
          <tbody id="unbilled-tests-list">
            <!-- Unbilled tests will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Billing Records Section -->
  <% if (locals.isFeatureVisible('Billing Reports')) { %>
  <div class="card mt-4 d-none" id="billing-records-section">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0"><i class="fas fa-file-invoice-dollar me-2"></i>Recent Billing Records</h5>
      <div>
        <button class="btn btn-sm btn-outline-secondary me-2" id="print-billings-btn">
          <i class="fas fa-print me-1"></i> Print
        </button>
        <button class="btn btn-sm btn-outline-danger" id="close-billings-btn">
          <i class="fas fa-times me-1"></i> Close
        </button>
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive print-friendly">
        <table class="table table-hover" id="billing-records-table">
          <thead class="table-light">
            <tr>
              <th>Bill #</th>
              <th>Date</th>
              <th>Patient</th>
              <th>Items</th>
              <th>Subtotal</th>
              <th>Discount</th>
              <th>Total</th>
              <th>Paid</th>
              <th>Due</th>
              <th class="no-print">Actions</th>
            </tr>
          </thead>
          <tbody id="billing-list">
            <!-- Billing records will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
  <% } %>
</div>

<!-- Custom CSS for hover effect -->
<style>
  .hover-card {
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  }
  .hover-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
  }
  
  .no-print {
    display: table-cell;
  }
  
  .print-friendly {
    display: block;
  }
  
  @media print {
    /* Basic layout improvements */
    body {
      font-family: Arial, sans-serif;
      font-size: 12px;
      color: #000;
      background: #fff;
    }
    
    .no-print {
      display: none !important;
    }
    
    .card {
      box-shadow: none !important;
      border: none !important;
      margin: 0 !important;
      padding: 0 !important;
    }
    
    .container {
      width: 100%;
      max-width: 100%;
      padding: 0;
      margin: 0;
    }
    
    /* Hide unnecessary elements */
    button, a.btn, .card-header:not(.print-keep), .hover-card, .dropdown-toggle {
      display: none !important;
    }
    
    /* Table formatting */
    .print-friendly {
      margin-top: 20px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 10px;
      margin-bottom: 20px;
      page-break-inside: auto;
      border: 1px solid #ddd;
    }
    
    table thead {
      display: table-header-group;
    }
    
    table th {
      background-color: #f5f5f5 !important;
      border: 1px solid #ddd;
      padding: 5px;
      font-weight: bold;
      text-align: left;
    }
    
    table td {
      border: 1px solid #ddd;
      padding: 5px;
      page-break-inside: avoid;
    }
    
    tr {
      page-break-inside: avoid;
    }
    
    /* Print Status */
    .badge {
      border: 1px solid #ddd;
      padding: 2px 5px;
      font-weight: normal;
      color: black !important;
      background-color: transparent !important;
    }
    
    /* Add page breaks */
    .page-break-after {
      page-break-after: always;
    }
    
    /* Footer for each page */
    @page {
      margin: 0.5cm;
    }
  }
</style>

<!-- JavaScript for handling the reports -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Keep track of which data sources have loaded
    const dataLoaded = {
      patients: false,
      doctors: false,
      appointments: false,
      tests: false,
      billings: false,
      dailyBilling: false,
      dueInvoices: false,
      cabins: false,
      commissions: false
    };
    
    // Function to hide cards with zero values
    function hideCardsWithZeroValue() {
      // Helper function to safely parse numeric values
      function parseValue(elementId) {
        const element = document.getElementById(elementId);
        if (!element) return NaN;
        
        const text = element.textContent.trim();
        // If the value is still "-", don't hide the card yet
        if (text === "-") {
          return -1; // Special value to indicate data not loaded yet
        }
        // Try to parse the value
        const value = parseInt(text);
        return isNaN(value) ? 0 : value;
      }
      
      try {
        // Get all values first
        const totalBillings = parseValue('totalBillings');
        const totalRevenue = parseValue('totalRevenue');
        const dailyBillingCount = parseValue('dailyBillingCount');
        const dueInvoiceCount = parseValue('dueInvoiceCount');
        
        // Force show billing card if there is revenue, even if count is 0
        const billingCard = document.getElementById('billing-card');
        if (billingCard) {
          // Check both totalBillings and if there's any revenue
          const hasBillingActivity = totalBillings > 0 || 
                                     (totalRevenue && totalRevenue !== 'Tk 0' && totalRevenue !== 'Tk -');
          
          if (!hasBillingActivity) {
            billingCard.style.display = 'none';
          } else {
            billingCard.style.display = 'block';
          }
        }
        
        // Force show daily billing card if there's activity today
        const dailyBillingCard = document.getElementById('daily-billing-card');
        if (dailyBillingCard) {
          if (dailyBillingCount <= 0) {
            dailyBillingCard.style.display = 'none';
          } else {
            dailyBillingCard.style.display = 'block';
          }
        }
        
        // Check due invoice card
        const dueInvoiceCard = document.getElementById('due-invoice-card');
        if (dueInvoiceCard) {
          if (dueInvoiceCount <= 0) {
            dueInvoiceCard.style.display = 'none';
          } else {
            dueInvoiceCard.style.display = 'block';
          }
        }
        
        // Check other cards
        const patientCard = document.getElementById('patient-card');
        const totalPatients = parseValue('totalPatients');
        if (patientCard) {
          patientCard.style.display = totalPatients === 0 ? 'none' : 'block';
        }
        
        const doctorCard = document.getElementById('doctor-card');
        const totalDoctors = parseValue('totalDoctors');
        if (doctorCard) {
          doctorCard.style.display = totalDoctors === 0 ? 'none' : 'block';
        }
        
        const commissionCard = document.getElementById('commission-card');
        const totalCommissions = parseValue('totalCommissions');
        if (commissionCard) {
          commissionCard.style.display = totalCommissions === 0 ? 'none' : 'block';
        }
        
        const appointmentCard = document.getElementById('appointment-card');
        const totalAppointments = parseValue('totalAppointments');
        if (appointmentCard) {
          appointmentCard.style.display = totalAppointments === 0 ? 'none' : 'block';
        }
        
        const testCard = document.getElementById('test-card');
        const totalTests = parseValue('totalTests');
        if (testCard) {
          testCard.style.display = totalTests === 0 ? 'none' : 'block';
        }
        
        const cabinCard = document.getElementById('cabin-card');
        const totalBookings = parseValue('totalBookings');
        if (cabinCard) {
          cabinCard.style.display = totalBookings === 0 ? 'none' : 'block';
        }
      } catch (error) {
        console.error("Error in hideCardsWithZeroValue:", error);
      }
    }
    
    // Check if all data is loaded
    function checkAllDataLoaded() {
      if (dataLoaded.patients && dataLoaded.doctors && dataLoaded.appointments && 
          dataLoaded.tests && dataLoaded.billings && dataLoaded.dailyBilling && 
          dataLoaded.dueInvoices && dataLoaded.cabins && dataLoaded.commissions) {
        // All data has been loaded, now hide cards with zero values
        hideCardsWithZeroValue();
      }
    }
    
    // Run an initial check after all data has had a chance to load (3 seconds)
    setTimeout(function() {
      hideCardsWithZeroValue();
    }, 3000);
    
    // Fetch billing statistics
    fetch('/reports/billing-stats')
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        const totalBillingsElement = document.getElementById('totalBillings');
        const totalRevenueElement = document.getElementById('totalRevenue');
        
        // The API returns totalRevenue but not totalBillings, so we need to calculate it
        const billingCount = data.totalBillings || (data.todayCount !== undefined ? data.todayCount : 0);
        
        if (totalBillingsElement) {
          totalBillingsElement.textContent = billingCount;
        }
        
        const revenue = data.totalRevenue || 0;
        if (totalRevenueElement) {
          totalRevenueElement.textContent = 'Tk ' + revenue.toLocaleString();
        }
        
        dataLoaded.billings = true;
        checkAllDataLoaded();
      })
      .catch(error => {
        console.error('Error fetching billing stats:', error);
        
        // Set default values on error
        const totalBillingsElement = document.getElementById('totalBillings');
        const totalRevenueElement = document.getElementById('totalRevenue');
        
        if (totalBillingsElement) totalBillingsElement.textContent = '0';
        if (totalRevenueElement) totalRevenueElement.textContent = 'Tk 0';
        
        dataLoaded.billings = true;
        checkAllDataLoaded();
      });
    
    // Fetch daily billing statistics
    fetch('/reports/daily-billing-stats')
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        const dailyBillingCountElement = document.getElementById('dailyBillingCount');
        const dailyBillingAmountElement = document.getElementById('dailyBillingAmount');
        
        // Handle stats, check if it's in a different format
        const dailyCount = data.dailyBillingCount || 
                          (data.stats && data.stats.length > 0 ? data.stats.reduce((sum, item) => sum + (item.count || 0), 0) : 0);
        
        const dailyAmount = data.dailyBillingAmount || 
                           (data.stats && data.stats.length > 0 ? data.stats.reduce((sum, item) => sum + (item.amount || 0), 0) : 0);
        
        if (dailyBillingCountElement) {
          dailyBillingCountElement.textContent = dailyCount;
        }
        
        if (dailyBillingAmountElement) {
          dailyBillingAmountElement.textContent = 'Tk ' + dailyAmount.toLocaleString();
        }
        
        dataLoaded.dailyBilling = true;
        checkAllDataLoaded();
      })
      .catch(error => {
        console.error('Error fetching daily billing stats:', error);
        
        // Set default values on error
        const dailyBillingCountElement = document.getElementById('dailyBillingCount');
        const dailyBillingAmountElement = document.getElementById('dailyBillingAmount');
        
        if (dailyBillingCountElement) dailyBillingCountElement.textContent = '0';
        if (dailyBillingAmountElement) dailyBillingAmountElement.textContent = 'Tk 0';
        
        dataLoaded.dailyBilling = true;
        checkAllDataLoaded();
      });
    
    // Fetch due invoice statistics
    fetch('/reports/due-invoice-stats')
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        const dueInvoiceCountElement = document.getElementById('dueInvoiceCount');
        const dueInvoiceAmountElement = document.getElementById('dueInvoiceAmount');
        
        if (dueInvoiceCountElement) {
          dueInvoiceCountElement.textContent = data.dueInvoiceCount;
        }
        
        if (dueInvoiceAmountElement) {
          dueInvoiceAmountElement.textContent = 'Tk ' + data.dueInvoiceAmount.toLocaleString();
        }
        
        dataLoaded.dueInvoices = true;
        checkAllDataLoaded();
      })
      .catch(error => {
        console.error('Error fetching due invoice stats:', error);
        dataLoaded.dueInvoices = true;
        checkAllDataLoaded();
      });
    
    // Fetch other statistics
    // Patient statistics
    fetchAndUpdateStats('patients', '/reports/patient-stats', {
      'totalPatients': 'totalPatients',
      'newPatients': 'newPatients'
    });
    
    // Doctor statistics
    fetchAndUpdateStats('doctors', '/reports/doctor-stats', {
      'totalDoctors': 'totalDoctors'
    });
    
    // Commission statistics
    fetchAndUpdateStats('commissions', '/reports/commission-stats', {
      'totalCommissions': 'totalCommissions',
      'totalCommissionAmount': 'totalCommissionAmount',
      formatter: {
        'totalCommissionAmount': (val) => 'Tk ' + val.toLocaleString()
      }
    });
    
    // Appointment statistics
    fetchAndUpdateStats('appointments', '/reports/appointment-stats', {
      'totalAppointments': 'totalAppointments',
      'pendingAppointments': 'pendingAppointments'
    });
    
    // Test statistics
    fetchAndUpdateStats('tests', '/reports/test-stats', {
      'totalTests': 'totalTests',
      'pendingTests': 'pendingTests'
    });
    
    // Cabin statistics
    fetchAndUpdateStats('cabins', '/reports/cabin-stats', {
      'totalBookings': 'totalBookings',
      'activeBookings': 'activeBookings'
    });
    
    // Helper function to fetch stats and update elements
    function fetchAndUpdateStats(key, endpoint, mapping) {
      fetch(endpoint)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          // Loop through the mapping and update elements
          for (const elementId in mapping) {
            if (elementId === 'formatter') continue;
            
            const dataKey = mapping[elementId];
            const element = document.getElementById(elementId);
            
            if (element && data[dataKey] !== undefined) {
              // Check if we have a formatter for this element
              if (mapping.formatter && mapping.formatter[elementId]) {
                element.textContent = mapping.formatter[elementId](data[dataKey]);
              } else {
                element.textContent = data[dataKey];
              }
            }
          }
          
          dataLoaded[key] = true;
          checkAllDataLoaded();
        })
        .catch(error => {
          console.error(`Error fetching ${key} stats:`, error);
          dataLoaded[key] = true;
          checkAllDataLoaded();
        });
    }

    // Load all billing records
    loadBillingRecords();

    // Ensure billing cards are clickable
    initializeBillingCardActions();
    
    function initializeBillingCardActions() {
      // Show billing records when clicking on the billing card
      const billingCard = document.querySelector('#billing-card .card');
      if (billingCard) {
        billingCard.addEventListener('click', function(e) {
          // Prevent triggering this if clicking on the dropdown
          if (!e.target.closest('.dropdown')) {
            const billingRecordsSection = document.getElementById('billing-records-section');
            if (billingRecordsSection) {
              billingRecordsSection.classList.remove('d-none');
              loadBillingRecords();
            }
          }
        });
      }
      
      // Alternative approach using direct title selector
      const billingCardTitle = document.querySelector('.card h5.card-title.text-success');
      if (billingCardTitle) {
        const parentCard = billingCardTitle.closest('.card');
        if (parentCard) {
          parentCard.addEventListener('click', function(e) {
            if (!e.target.closest('.dropdown')) {
              const billingRecordsSection = document.getElementById('billing-records-section');
              if (billingRecordsSection) {
                billingRecordsSection.classList.remove('d-none');
                loadBillingRecords();
              }
            }
          });
        }
      }
      
      // Show daily billing records when clicking on the daily billing card
      const dailyBillingCard = document.querySelector('#daily-billing-card .card');
      if (dailyBillingCard) {
        dailyBillingCard.addEventListener('click', function(e) {
          if (!e.target.closest('a')) {
            window.location.href = '/reports/billing/daily';
          }
        });
      }
      
      // Show due invoice records when clicking on the due invoice card
      const dueInvoiceCard = document.querySelector('#due-invoice-card .card');
      if (dueInvoiceCard) {
        dueInvoiceCard.addEventListener('click', function(e) {
          if (!e.target.closest('a')) {
            window.location.href = '/reports/billing/due';
          }
        });
      }
    }
    
    // Show unbilled appointments
    const showUnbilledAppointmentsButtons = document.querySelectorAll('.show-unbilled-appointments-btn');
    showUnbilledAppointmentsButtons.forEach(button => {
      button.addEventListener('click', function() {
        const unbilledAppointmentsSection = document.getElementById('unbilled-appointments-section');
        if (unbilledAppointmentsSection) {
          unbilledAppointmentsSection.classList.remove('d-none');
          loadUnbilledAppointments();
        }
      });
    });

    // Close unbilled appointments section
    const closeAppointmentsBtn = document.getElementById('close-appointments-btn');
    if (closeAppointmentsBtn) {
      closeAppointmentsBtn.addEventListener('click', function() {
        const unbilledAppointmentsSection = document.getElementById('unbilled-appointments-section');
        if (unbilledAppointmentsSection) {
          unbilledAppointmentsSection.classList.add('d-none');
        }
      });
    }

    // Show unbilled tests
    const showUnbilledTestsButtons = document.querySelectorAll('.show-unbilled-tests-btn');
    showUnbilledTestsButtons.forEach(button => {
      button.addEventListener('click', function() {
        const unbilledTestsSection = document.getElementById('unbilled-tests-section');
        if (unbilledTestsSection) {
          unbilledTestsSection.classList.remove('d-none');
          loadUnbilledTests();
        }
      });
    });

    // Close unbilled tests section
    const closeTestsBtn = document.getElementById('close-tests-btn');
    if (closeTestsBtn) {
      closeTestsBtn.addEventListener('click', function() {
        const unbilledTestsSection = document.getElementById('unbilled-tests-section');
        if (unbilledTestsSection) {
          unbilledTestsSection.classList.add('d-none');
        }
      });
    }

    // Close billing records section
    const closeBillingsBtn = document.getElementById('close-billings-btn');
    if (closeBillingsBtn) {
      closeBillingsBtn.addEventListener('click', function() {
        const billingRecordsSection = document.getElementById('billing-records-section');
        if (billingRecordsSection) {
          billingRecordsSection.classList.add('d-none');
        }
      });
    }
    
    // Print buttons
    const printBillingsBtn = document.getElementById('print-billings-btn');
    if (printBillingsBtn) {
      printBillingsBtn.addEventListener('click', function() {
        printSection('billing-records-section');
      });
    }
    
    const printAppointmentsBtn = document.getElementById('print-appointments-btn');
    if (printAppointmentsBtn) {
      printAppointmentsBtn.addEventListener('click', function() {
        printSection('unbilled-appointments-section');
      });
    }
    
    const printTestsBtn = document.getElementById('print-tests-btn');
    if (printTestsBtn) {
      printTestsBtn.addEventListener('click', function() {
        printSection('unbilled-tests-section');
      });
    }

    // Function to load all billing records
    function loadBillingRecords() {
      fetch('/reports/all-billings')
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          const billingList = document.getElementById('billing-list');
          
          if (!billingList) {
            return;
          }
          
          billingList.innerHTML = '';
          
          // Make sure data is an array
          const billingData = Array.isArray(data) ? data : [];
          
          if (billingData.length > 0) {
            billingData.forEach(bill => {
              try {
                const date = new Date(bill.billDate || bill.createdAt || new Date());
                const formattedDate = date.toLocaleDateString();
                
                const subTotal = parseFloat(bill.subtotalAmount || 0);
                const discount = parseFloat(bill.discountAmount || 0);
                const total = parseFloat(bill.totalAmount || 0);
                const paid = parseFloat(bill.paidAmount || 0);
                const due = parseFloat(bill.dueAmount || 0);
                
                // Check if Patient exists before accessing properties
                const patientName = bill.Patient ? bill.Patient.name : 'Unknown';
                
                // Check if items exists and is valid JSON
                let itemsLength = 0;
                try {
                  if (bill.items) {
                    const itemsArray = typeof bill.items === 'string' ? JSON.parse(bill.items) : bill.items;
                    itemsLength = Array.isArray(itemsArray) ? itemsArray.length : 0;
                  }
                } catch (e) {
                  console.error('Error parsing items:', e);
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td><strong>#${bill.billNumber || bill.id || 'N/A'}</strong></td>
                  <td>${formattedDate}</td>
                  <td>${patientName}</td>
                  <td>${itemsLength}</td>
                  <td>Tk ${subTotal.toFixed(2)}</td>
                  <td>Tk ${discount.toFixed(2)}</td>
                  <td><strong>Tk ${total.toFixed(2)}</strong></td>
                  <td>Tk ${paid.toFixed(2)}</td>
                  <td class="${due > 0 ? 'text-danger' : ''}">${due > 0 ? 'Tk ' + due.toFixed(2) : 'Paid'}</td>
                  <td class="no-print">
                    <a href="/billing/receipt/${bill.id}" class="btn btn-sm btn-primary">
                      <i class="fas fa-eye"></i> View
                    </a>
                  </td>
                `;
                
                billingList.appendChild(row);
              } catch (error) {
                console.error('Error processing billing record:', error, bill);
              }
            });
          } else {
            billingList.innerHTML = '<tr><td colspan="10" class="text-center">No billing records found</td></tr>';
          }
        })
        .catch(error => {
          console.error('Error loading billing records:', error);
          const billingList = document.getElementById('billing-list');
          if (billingList) {
            billingList.innerHTML = '<tr><td colspan="10" class="text-center text-danger">Error loading billing records</td></tr>';
          }
        });
    }

    // Function to load unbilled appointments
    function loadUnbilledAppointments() {
      fetch('/reports/unbilled-appointments')
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          const unbilledAppointmentsList = document.getElementById('unbilled-appointments-list');
          if (unbilledAppointmentsList) {
            unbilledAppointmentsList.innerHTML = '';
          
            if (data.length > 0) {
              data.forEach(appointment => {
                const appointmentDate = new Date(appointment.appointmentDate);
                const formattedDate = appointmentDate.toLocaleDateString();
                const formattedTime = appointment.appointmentTime;
                
                const fee = parseFloat(appointment.Doctor?.consultationFee || 0);
                
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td>${formattedDate}</td>
                  <td>${formattedTime}</td>
                  <td>${appointment.Patient?.name || 'Unknown'}</td>
                  <td>Dr. ${appointment.Doctor?.name || 'Unknown'}</td>
                  <td><span class="badge bg-warning">${appointment.status}</span></td>
                  <td>Tk ${fee.toFixed(2)}</td>
                  <td class="no-print">
                    <a href="/billing?patientId=${appointment.PatientId}" class="btn btn-sm btn-success">
                      <i class="fas fa-file-invoice"></i> Bill Now
                    </a>
                  </td>
                `;
                
                unbilledAppointmentsList.appendChild(row);
              });
            } else {
              unbilledAppointmentsList.innerHTML = '<tr><td colspan="7" class="text-center">No unbilled appointments found</td></tr>';
            }
          }
        })
        .catch(error => {
          console.error('Error loading unbilled appointments:', error);
          const unbilledAppointmentsList = document.getElementById('unbilled-appointments-list');
          if (unbilledAppointmentsList) {
            unbilledAppointmentsList.innerHTML = '<tr><td colspan="7" class="text-center text-danger">Error loading unbilled appointments</td></tr>';
          }
        });
    }

    // Function to load unbilled tests
    function loadUnbilledTests() {
      fetch('/reports/unbilled-tests')
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          const unbilledTestsList = document.getElementById('unbilled-tests-list');
          if (unbilledTestsList) {
            unbilledTestsList.innerHTML = '';
          
            if (data.length > 0) {
              data.forEach(test => {
                const requestDate = new Date(test.requestDate);
                const formattedDate = requestDate.toLocaleDateString();
                
                // Process delivery date
                let deliveryDate = 'N/A';
                if (test.deliveryDate) {
                  const dateObj = new Date(test.deliveryDate);
                  if (!isNaN(dateObj.getTime())) {
                    deliveryDate = dateObj.toLocaleDateString();
                  }
                }
                
                const fee = parseFloat(test.Test?.price || 0);
                
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td>${formattedDate}</td>
                  <td>${test.Patient?.name || 'Unknown'}</td>
                  <td>${test.Test?.name || 'Unknown'}</td>
                  <td><span class="badge ${test.priority === 'Urgent' ? 'bg-danger' : 'bg-info'}">${test.priority}</span></td>
                  <td><span class="badge bg-warning">${test.status}</span></td>
                  <td>${test.deliveryOption || 'Not Collected'}</td>
                  <td>${deliveryDate}</td>
                  <td>Tk ${fee.toFixed(2)}</td>
                  <td class="no-print">
                    <a href="/billing?patientId=${test.PatientId}" class="btn btn-sm btn-success">
                      <i class="fas fa-file-invoice"></i> Bill Now
                    </a>
                  </td>
                `;
                
                unbilledTestsList.appendChild(row);
              });
            } else {
              unbilledTestsList.innerHTML = '<tr><td colspan="9" class="text-center">No unbilled test requests found</td></tr>';
            }
          }
        })
        .catch(error => {
          console.error('Error loading unbilled tests:', error);
          const unbilledTestsList = document.getElementById('unbilled-tests-list');
          if (unbilledTestsList) {
            unbilledTestsList.innerHTML = '<tr><td colspan="9" class="text-center text-danger">Error loading unbilled tests</td></tr>';
          }
        });
    }

    // Function to print a specific section
    function printSection(sectionId) {
      // Add print-keep class to the card header
      const sectionElement = document.getElementById(sectionId);
      if (!sectionElement) {
        return;
      }
      
      const cardHeader = sectionElement.querySelector('.card-header');
      if (cardHeader) {
        cardHeader.classList.add('print-keep');
      }
      
      const printContents = sectionElement.innerHTML;
      const originalContents = document.body.innerHTML;
      
      let headerTitle = 'Report';
      const cardHeaderH5 = sectionElement.querySelector('.card-header h5');
      if (cardHeaderH5) {
        headerTitle = cardHeaderH5.innerText;
      }

      document.body.innerHTML = `
        <div class="container">
          <div class="row mb-4">
            <div class="col text-center">
              <h2>Hospital Management System</h2>
              <p>123 Medical Center Avenue, Healthcare City</p>
              <p>Phone: +880 1234-567890 | Email: info@hospital.com</p>
              <hr>
              <h4>${headerTitle}</h4>
              <p class="text-muted">Generated on ${new Date().toLocaleString()}</p>
            </div>
          </div>
          <div class="row mb-4">
            <div class="col">
              <div class="card bg-light">
                <div class="card-body">
                  <div class="row">
                    <div class="col-3">
                      <div class="mb-2">
                        <small class="text-muted">Total Records</small>
                        <h4 id="print-total-records"></h4>
                      </div>
                    </div>
                    <div class="col-3">
                      <div class="mb-2">
                        <small class="text-muted">Period</small>
                        <h4>${new Date().toLocaleDateString()}</h4>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          ${printContents}
        </div>
      `;
      
      // Set the total records based on the type of section
      let totalRecords = 0;
      if (sectionId === 'unbilled-appointments-section') {
        totalRecords = document.querySelectorAll('#unbilled-appointments-list tr').length;
      } else if (sectionId === 'unbilled-tests-section') {
        totalRecords = document.querySelectorAll('#unbilled-tests-list tr').length;
      } else if (sectionId === 'billing-records-section') {
        totalRecords = document.querySelectorAll('#billing-list tr').length;
      }
      
      // Update the total records in the print view
      const printTotalRecordsElement = document.getElementById('print-total-records');
      if (printTotalRecordsElement) {
        printTotalRecordsElement.textContent = totalRecords;
      }

      window.print();
      document.body.innerHTML = originalContents;
      
      // Reattach event listeners after printing
      document.addEventListener('DOMContentLoaded', function() {
        location.reload();
      });
    }
  });
</script>

<%- include('partials/footer') %> 